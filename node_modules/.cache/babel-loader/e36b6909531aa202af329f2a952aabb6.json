{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/pages/components/QRscanner.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport QRCode from \"react-qr-code\";\nimport { useState, useRef } from 'react';\nimport QrReader from 'react-qr-reader';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DealTransfer from './DealTransfer.js';\nimport { Typography, Button, Card, CircularProgress, Container, CardActions, Grid, CardContent, TextField } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction QRscanner(props) {\n  _s();\n\n  const [text, setText] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [scanResultFile, setScanResultFile] = useState('');\n  const [scanResultWebCam, setScanResultWebCam] = useState('');\n  const [deal, setDeal] = useState('');\n  const [openPay, setOpenPay] = useState(false);\n  const qrRef = useRef(null);\n  const {\n    onClose,\n    open,\n    setData\n  } = props;\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleClosePay = () => {\n    setOpenPay(false); // setDeal(\"\");\n\n    onClose();\n  };\n\n  const onScanFile = () => {\n    qrRef.current.openImageDialog();\n  };\n\n  const handleErrorWebCam = error => {\n    console.log(error);\n  };\n\n  const handleScanWebCam = result => {\n    if (result) {\n      try {\n        let deal = JSON.parse(result);\n\n        if (deal.code) {\n          setDeal(deal);\n          setOpenPay(true);\n        }\n\n        console.log(\"DEAL\");\n      } catch (e) {\n        console.log(\"Recipent\");\n        setScanResultWebCam(result);\n        setData(result);\n        onClose();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    \"aria-labelledby\": \"alert-dialog-title\",\n    fullWidth: true,\n    maxWidth: \"xs\",\n    onClose: handleClose,\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      style: {\n        backgroundColor: 'rgba(220, 241, 229, 0.57)',\n        color: 'rgba(9, 91, 11, 0.86)'\n      },\n      id: \"alert-dialog-title\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        fullWidth: true,\n        margin: \"dense\",\n        variant: \"subtitle1\",\n        children: \"Scan public key of Recipient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QrReader, {\n      delay: 300,\n      style: {\n        width: '100%'\n      },\n      onError: handleErrorWebCam,\n      onScan: handleScanWebCam\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: onScanFile,\n        children: \"Scan Qr Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(QrReader, {\n        ref: qrRef,\n        delay: 300,\n        style: {\n          width: '100%'\n        },\n        onError: handleErrorFile,\n        onScan: handleScanFile,\n        legacyMode: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Scanned Code: \", scanResultFile]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        display: 'flex',\n        margin: '5px'\n      },\n      align: \"center\",\n      gutterBottom: true,\n      variant: \"subtitle2\",\n      children: [\" \", scanResultWebCam]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DealTransfer, {\n      deal: deal,\n      open: openPay,\n      onClose: handleClosePay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n}\n\n_s(QRscanner, \"3vevgIKK+9z0poFNArLYr3ftPM8=\");\n\n_c = QRscanner;\nQRscanner.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  setData: PropTypes.func.isRequired\n};\nexport default QRscanner;\n\nvar _c;\n\n$RefreshReg$(_c, \"QRscanner\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/pages/components/QRscanner.js"],"names":["React","QRCode","useState","useRef","QrReader","PropTypes","Dialog","DialogTitle","DealTransfer","Typography","Button","Card","CircularProgress","Container","CardActions","Grid","CardContent","TextField","QRscanner","props","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","deal","setDeal","openPay","setOpenPay","qrRef","onClose","open","setData","handleClose","handleClosePay","onScanFile","current","openImageDialog","handleErrorWebCam","error","console","log","handleScanWebCam","result","JSON","parse","code","e","backgroundColor","color","width","handleErrorFile","handleScanFile","display","margin","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React from 'react'\nimport QRCode from \"react-qr-code\";\nimport {useState, useRef} from 'react'\nimport QrReader from 'react-qr-reader';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DealTransfer from './DealTransfer.js';\nimport {Typography, Button, Card,  CircularProgress, Container, CardActions, Grid, CardContent, TextField} from '@material-ui/core'\n\nfunction QRscanner(props) {\n\n    const [text, setText] = useState('');\n    const [imageUrl, setImageUrl] = useState('');\n    const [scanResultFile, setScanResultFile] = useState('');\n    const [scanResultWebCam, setScanResultWebCam] =  useState('');\n    const [deal, setDeal]  = useState('');\n    const [openPay, setOpenPay]  = useState(false);\n    const qrRef = useRef(null);\n\n    const { onClose, open, setData } = props;\n\n    const handleClose = () => {\n      onClose();\n    };\n\n    const handleClosePay = () => {\n      setOpenPay(false);\n      // setDeal(\"\");\n      onClose();\n    };\n\n    const onScanFile = () => {\n        qrRef.current.openImageDialog();\n      }\n      const handleErrorWebCam = (error) => {\n        console.log(error);\n      }\n      const handleScanWebCam = (result) => {\n        \n        if (result){\n            try {\n              let deal = JSON.parse(result)\n              if (deal.code){\n                setDeal(deal);\n                setOpenPay(true);\n              }\n              console.log(\"DEAL\")\n            } catch (e) {\n              console.log(\"Recipent\")\n              setScanResultWebCam(result);\n              setData(result);\n              onClose();\n            }\n     \n        }\n      }\n    \n\n    return (\n      <Dialog aria-labelledby=\"alert-dialog-title\" fullWidth maxWidth='xs' onClose={handleClose} open={open}>\n            <DialogTitle  style={{ backgroundColor: 'rgba(220, 241, 229, 0.57)', color: 'rgba(9, 91, 11, 0.86)' }} id=\"alert-dialog-title\">\n                <Typography fullWidth margin=\"dense\" variant=\"subtitle1\" >Scan public key of Recipient</Typography>\n            </DialogTitle>\n            <QrReader\n            delay={300}\n            style={{width: '100%'}}\n            onError={handleErrorWebCam}\n            onScan={handleScanWebCam}\n              />\n              <div>\n              <Button variant=\"contained\" color=\"secondary\" onClick={onScanFile}>Scan Qr Code</Button>\n              <QrReader\n                ref={qrRef}\n                delay={300}\n                style={{width: '100%'}}\n                onError={handleErrorFile}\n                onScan={handleScanFile}\n                legacyMode\n              />\n              <h3>Scanned Code: {scanResultFile}</h3>\n\n              </div>\n            \n            <Typography style={{display: 'flex', margin: '5px'}} align='center' gutterBottom variant = \"subtitle2\"> {scanResultWebCam}</Typography> \n            <DealTransfer deal = {deal} open={openPay} onClose={handleClosePay}/>  \n      </Dialog>\n    );\n  }\n  \nQRscanner.propTypes = {\n   onClose: PropTypes.func.isRequired,\n   open: PropTypes.bool.isRequired,\n   setData : PropTypes.func.isRequired,\n };\n\nexport default QRscanner;"]},"metadata":{},"sourceType":"module"}