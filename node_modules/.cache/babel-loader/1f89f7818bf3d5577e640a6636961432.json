{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/pages/components/NewPost.js\",\n    _s = $RefreshSig$();\n\nimport { bindActionCreators } from 'redux';\nimport AddPost from '../../components/AddPost';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { Typography, Button, TextField, Grid } from '@material-ui/core';\nimport xtype from 'xtypejs';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useState, useEffect } from 'react';\nimport SendIcon from '@material-ui/icons/Send';\nimport Avatar from '@material-ui/core/Avatar'; // import EditPost from '../../pages2/EditPost/EditPost';\n\nimport PropTypes from 'prop-types';\nimport { useAuth } from \"../../helper/AuthContext\"; // import SinglePost from '../../pages2/SinglePost/SinglePost';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NewPostDialog(props) {\n  _s();\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n      maxWidth: 752\n    },\n    demo: {\n      backgroundColor: theme.palette.background.paper\n    },\n    title: {\n      margin: theme.spacing(4, 0, 2)\n    }\n  }));\n  const [dense, setDense] = useState(false);\n  const {\n    currentBCAccount,\n    keypair\n  } = useAuth();\n  const [post, setPost] = useState();\n  const {\n    onClose,\n    open\n  } = props;\n  const classes = useStyles();\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const test_cases = [\"My bike is broken, I need someone to come and fix it. I am always available in the afternoon after 5pm.\", \"I need someone to help me cleaning my room in this weekend\", \" I cannot turn on my computer, I need someone come and help fix it asap\", \"I need help with some difficult Maths exercises\"];\n  let tests = [];\n  {\n    test_cases.map(test => {\n      tests.push( /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"text\",\n        color: \"primary\",\n        size: \"small\",\n        onClick: () => setPost(test),\n        titleStyle: {\n          color: \"white\",\n          fontSize: 16\n        },\n        style: {\n          textTransform: 'none',\n          textAlign: 'left'\n        },\n        children: test\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 18\n      }, this));\n    });\n  }\n\n  async function newPost() {\n    const response = await fetch(\"/newPost\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'privateKey': currentBCAccount.privateKey,\n        'pubkey': keypair.y,\n        'content': post\n      })\n    });\n    handleClose();\n  }\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    \"aria-labelledby\": \"alert-dialog-title\",\n    fullWidth: true,\n    maxWidth: \"xs\",\n    onClose: handleClose,\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      style: {\n        backgroundColor: 'navy',\n        color: 'white'\n      },\n      id: \"alert-dialog-title\",\n      children: \"Create a new task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        onChange: e => setPost(e.target.value),\n        autoFocus: true,\n        margin: \"dense\",\n        label: \"Description\",\n        fullWidth: true,\n        value: post,\n        multiline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.demo,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          dense: dense,\n          children: tests\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"primary\",\n        component: \"span\",\n        onClick: newPost,\n        children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n} // NewPostDialog.propTypes = {\n//     onClose: PropTypes.func.isRequired,\n//     open: PropTypes.bool.isRequired,\n//     description: PropTypes.string.isRequired,\n// };\n\n\n_s(NewPostDialog, \"I7heD/T1RCElnzrVnaGQaS2Vq9o=\", false, function () {\n  return [useAuth, useStyles];\n});\n\n_c = NewPostDialog;\nexport default NewPostDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPostDialog\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/pages/components/NewPost.js"],"names":["bindActionCreators","AddPost","DialogTitle","DialogActions","DialogContent","DialogContentText","Dialog","List","ListItem","Typography","Button","TextField","Grid","xtype","makeStyles","IconButton","useState","useEffect","SendIcon","Avatar","PropTypes","useAuth","NewPostDialog","props","useStyles","theme","root","flexGrow","maxWidth","demo","backgroundColor","palette","background","paper","title","margin","spacing","dense","setDense","currentBCAccount","keypair","post","setPost","onClose","open","classes","handleClose","test_cases","tests","map","test","push","color","fontSize","textTransform","textAlign","newPost","response","fetch","method","headers","body","JSON","stringify","privateKey","y","e","target","value"],"mappings":"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","sourcesContent":["import { bindActionCreators } from 'redux';\nimport AddPost from '../../components/AddPost';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport {Typography, Button, TextField, Grid} from '@material-ui/core'\nimport xtype from 'xtypejs'\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport {useState, useEffect} from 'react'\nimport SendIcon from '@material-ui/icons/Send';\nimport Avatar from '@material-ui/core/Avatar';\n// import EditPost from '../../pages2/EditPost/EditPost';\nimport PropTypes from 'prop-types';\nimport { useAuth } from \"../../helper/AuthContext\"\n// import SinglePost from '../../pages2/SinglePost/SinglePost';\n\nfunction NewPostDialog(props) {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      maxWidth: 752,\n    },\n    demo: {\n      backgroundColor: theme.palette.background.paper,\n    },\n    title: {\n      margin: theme.spacing(4, 0, 2),\n    },\n  }));\n    const [dense, setDense] = useState(false);\n    const { currentBCAccount, keypair} = useAuth()\n    const [post, setPost] = useState()\n    const { onClose, open} = props;\n    const classes = useStyles();\n\n    const handleClose = () => {\n      onClose();\n    };\n\n    const test_cases = [\n      \"My bike is broken, I need someone to come and fix it. I am always available in the afternoon after 5pm.\",\n      \"I need someone to help me cleaning my room in this weekend\",\n      \" I cannot turn on my computer, I need someone come and help fix it asap\",\n      \"I need help with some difficult Maths exercises\"\n    ]\n    let tests = []\n    {test_cases.map( (test)=>{\n      tests.push(<Button variant=\"text\" color=\"primary\"\n          size = \"small\"\n          onClick={() => setPost(test)}\n          titleStyle={{\n            color: \"white\",\n            fontSize: 16,\n          }}\n          style={{textTransform: 'none', textAlign:'left'}}\n        >\n        {test}\n      </Button>)\n    }\n    )}\n    async function newPost() {\n        const response = await fetch(\"/newPost\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            'privateKey': currentBCAccount.privateKey,\n            'pubkey' : keypair.y,\n            'content': post\n          }),\n        })\n        handleClose();\n    }\n       \n      \n    return (\n        <Dialog aria-labelledby=\"alert-dialog-title\" fullWidth maxWidth='xs' onClose={handleClose} open={open}>\n            <DialogTitle  style={{ backgroundColor: 'navy', color: 'white' }} id=\"alert-dialog-title\">\n                Create a new task\n            </DialogTitle>\n            <DialogContent>\n                <TextField onChange={e => setPost(e.target.value)} autoFocus\n                            margin=\"dense\"\n                            label=\"Description\"\n                            fullWidth \n                            value = {post}        \n                            multiline = {true} />\n                <div className={classes.demo}>\n                <List dense={dense}>\n                  {tests}\n                </List>\n              </div>\n            </DialogContent>\n            <DialogActions>\n            <IconButton color=\"primary\" component=\"span\" onClick={newPost}>\n                    <SendIcon />\n            </IconButton>\n            </DialogActions>\n    \n        </Dialog>\n    );\n    }\n      \n// NewPostDialog.propTypes = {\n//     onClose: PropTypes.func.isRequired,\n//     open: PropTypes.bool.isRequired,\n//     description: PropTypes.string.isRequired,\n// };\nexport default (NewPostDialog);"]},"metadata":{},"sourceType":"module"}