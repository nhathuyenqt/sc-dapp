{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/pages/Messages.js\",\n    _s = $RefreshSig$();\n\nimport xtype from 'xtypejs';\nimport AddPost from '../components/AddPost';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from '@material-ui/core/Dialog';\nimport { Typography, Button, TextField, Grid } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport { DataGrid } from '@material-ui/data-grid';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json';\nimport text from './../contract_address.json';\nimport { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { green } from '@material-ui/core/colors';\nimport SendIcon from '@material-ui/icons/Send';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport DealDialog from './components/Deal';\nimport NewPostDialog from './components/NewPost';\nimport DealViewQR from './components/DealViewQR';\nimport Avatar from '@material-ui/core/Avatar'; // import EditPost from '../../pages2/EditPost/EditPost';\n\nimport PropTypes from 'prop-types';\nimport { useAuth } from \"../helper/AuthContext\"; // import SinglePost from '../../pages2/SinglePost/SinglePost';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = text['contract_address'];\n\nfunction Messages(props) {\n  _s();\n\n  const {\n    currentBCAccount,\n    keypair,\n    loading,\n    balance\n  } = useAuth();\n  const [msgList, setMsgList] = useState([]);\n  const classes = useStyles();\n  const State = ['Processing', 'Assigned', 'WaitingPaid', 'Closed', 'Cancel'];\n  const [QR, setQR] = useState();\n  const [showQR, setShowQR] = useState();\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 68,\n    headerClassName: 'super-app-theme--header'\n  }, {\n    field: 'content',\n    headerName: 'Content',\n    headerClassName: 'super-app-theme--header',\n    flex: 1,\n    color: 'white',\n    renderCell: params => {\n      let t = \"Your offer for request \" + params.row.requestId + \" is \" + (params.row.code ? \"Accepted\" : \"Rejected\");\n      return /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          children: t\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 18\n      }, this);\n    },\n    disableClickEventBubbling: true\n  }, {\n    field: 'detail',\n    headerName: 'Detail',\n    headerClassName: 'super-app-theme--header',\n    width: 150,\n    renderCell: params => /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        disabled: params.row.code ? false : true // style={{ color: green[500] }}\n        ,\n        color: \"primary\",\n        className: classes.button,\n        onClick: () => openQR(params.row),\n        startIcon: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this),\n        children: \"Show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this),\n    disableClickEventBubbling: true\n  }];\n  setTimeout(() => {\n    listenEvents();\n  }, 5000);\n\n  const openQR = item => {\n    setQR(item);\n    setShowQR(true);\n  };\n\n  async function loadMessages() {\n    const response = await fetch(\"/getMessages\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'user_key': currentBCAccount.privateKey\n      })\n    });\n    let result;\n    let newMsgs = [];\n    await response.json().then(message => {\n      message = message['message'];\n      console.log(message);\n      message.map((msg, i) => {\n        newMsgs.push({\n          id: i,\n          code: msg[0],\n          requestId: msg[1],\n          price: msg[2],\n          recipient: msg[3]\n        });\n      });\n      setMsgList(newMsgs);\n    });\n  }\n\n  async function listenEvents() {\n    if (typeof window.ethereum !== 'undefined') {\n      console.log('listenEvents');\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n      contract.on(\"NewPrice\", (id, CL_price, CR_price) => {\n        console.log(\"event \", id, CL_price, CR_price);\n      }); // console.log(contract.events)\n      // await contract.events.NewPrice({}).on(\"data\", (e) => console.log(e));\n    }\n  }\n\n  useEffect(() => {\n    loadMessages();\n  }, []);\n\n  async function reload() {\n    loadMessages();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '800px',\n      marginLeft: 100,\n      marginRight: 20\n    },\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      \"align-items\": \"center\",\n      style: {\n        width: '100%',\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true,\n        \"align-items\": \"right\",\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'right'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: reload,\n          children: \" RELOAD \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          width: '100%',\n          height: \"90%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: msgList,\n          columns: columns,\n          sortModel: [{\n            field: 'id',\n            sort: 'desc'\n          }],\n          pageSize: 8 //   checkboxSelection\n          ,\n          disableSelectionOnClick: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(DealViewQR, {\n      data: QR,\n      open: showQR,\n      onClose: setShowQR\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Messages, \"kEvg4b//DAaI9FIu/ljOEXy/e6A=\", false, function () {\n  return [useAuth, useStyles];\n});\n\n_c = Messages;\nconst useStyles = makeStyles({\n  root: {\n    '& .super-app-theme--header': {\n      backgroundColor: '#3b5998',\n      color: 'white',\n      fontFamily: \"Comic Sans MS\",\n      textTransform: 'capitalize'\n    }\n  }\n});\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/pages/Messages.js"],"names":["xtype","AddPost","DialogTitle","DialogActions","DialogContent","DialogContentText","Dialog","Typography","Button","TextField","Grid","IconButton","DataGrid","XContract","text","ethers","useState","useEffect","makeStyles","green","SendIcon","VisibilityIcon","DealDialog","NewPostDialog","DealViewQR","Avatar","PropTypes","useAuth","contractAddress","Messages","props","currentBCAccount","keypair","loading","balance","msgList","setMsgList","classes","useStyles","State","QR","setQR","showQR","setShowQR","columns","field","headerName","width","headerClassName","flex","color","renderCell","params","t","row","requestId","code","disableClickEventBubbling","button","openQR","setTimeout","listenEvents","item","loadMessages","response","fetch","method","headers","body","JSON","stringify","privateKey","result","newMsgs","json","then","message","console","log","map","msg","i","push","id","price","recipient","window","ethereum","provider","providers","Web3Provider","contract","Contract","abi","on","CL_price","CR_price","reload","height","marginLeft","marginRight","root","display","alignItems","justifyContent","sort","backgroundColor","fontFamily","textTransform"],"mappings":"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","sourcesContent":["import xtype from 'xtypejs'\nimport AddPost from '../components/AddPost';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from '@material-ui/core/Dialog';\nimport {Typography, Button, TextField, Grid} from '@material-ui/core'\nimport IconButton from '@material-ui/core/IconButton';\nimport { DataGrid } from '@material-ui/data-grid';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'\nimport text  from './../contract_address.json';\nimport {ethers} from 'ethers'\nimport {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/styles';\nimport { green } from '@material-ui/core/colors';\nimport SendIcon from '@material-ui/icons/Send';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport DealDialog from './components/Deal';\nimport NewPostDialog from './components/NewPost';\nimport DealViewQR from './components/DealViewQR';\nimport Avatar from '@material-ui/core/Avatar';\n\n// import EditPost from '../../pages2/EditPost/EditPost';\nimport PropTypes from 'prop-types';\nimport { useAuth } from \"../helper/AuthContext\"\n// import SinglePost from '../../pages2/SinglePost/SinglePost';\nconst contractAddress = text['contract_address']\n\nfunction Messages (props) {\n    const { currentBCAccount, keypair, loading, balance} = useAuth()\n    const [msgList, setMsgList] = useState([]);\n    const classes = useStyles();\n    const State = ['Processing', 'Assigned', 'WaitingPaid', 'Closed', 'Cancel'] ;\n    const [QR, setQR] = useState();\n    const [showQR, setShowQR] = useState();\n    const columns = [\n      { field: 'id', headerName: 'ID', width: 68, headerClassName: 'super-app-theme--header'},\n      {\n        field: 'content',\n        headerName: 'Content',\n        headerClassName: 'super-app-theme--header',\n        flex: 1,\n        color: 'white',\n        renderCell: (params) => {\n          \n          let t = \"Your offer for request \" + params.row.requestId + \" is \" + (params.row.code ? \"Accepted\" : \"Rejected\");\n          return(<strong>\n            <Typography variant=\"subtitle1\">\n               {t}\n            </Typography>\n          </strong>)\n\n        }    \n        ,\n        disableClickEventBubbling: true,\n      },\n      {\n        field: 'detail',\n        headerName: 'Detail',\n        headerClassName: 'super-app-theme--header',\n        width: 150,\n        renderCell: (params) => (\n          <strong>\n            <Button\n                variant=\"contained\"\n                disabled = {params.row.code? false : true}\n                // style={{ color: green[500] }}\n                color = 'primary'\n                className={classes.button}\n                onClick={() => openQR(params.row)}\n                startIcon={ <VisibilityIcon/>}\n              >\n                Show\n              </Button>\n{/* \n            <IconButton\n              style={{ color: green[500] }}\n              size=\"small\"\n              onClick={() => openQR(params.row)}\n              disabled = {params.row.code? false : true}\n              >\n              \n              <VisibilityIcon/>\n            </IconButton> */}\n          </strong>\n        ),\n        disableClickEventBubbling: true,\n      },\n    ];\n\n    setTimeout(()=>{\n      listenEvents()\n    }, 5000);\n    \n    const openQR = (item) => {\n      setQR(item);\n      setShowQR(true);\n    }\n\n    async function loadMessages(){\n      const response = await fetch(\"/getMessages\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            'user_key': currentBCAccount.privateKey,\n          }),\n        })\n        \n        let result\n        let newMsgs = []\n        await response.json().then((message) => {\n            message = message['message']\n            console.log(message)\n            message.map((msg, i) => {\n              newMsgs.push({\n                id : i,\n                code: msg[0],\n                requestId: msg[1],\n                price: msg[2],\n                recipient : msg[3]\n            })\n          })\n          setMsgList(newMsgs)\n        });\n\n  }\n\n\n    async function listenEvents(){\n      \n      if (typeof window.ethereum !== 'undefined'){\n        console.log('listenEvents')\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n        contract.on(\"NewPrice\", (id, CL_price, CR_price) => {\n          console.log(\"event \", id, CL_price, CR_price);\n        })\n        // console.log(contract.events)\n        // await contract.events.NewPrice({}).on(\"data\", (e) => console.log(e));\n      }\n    }\n\n    useEffect(() => {\n      loadMessages();\n      }, [])\n  \n    async function reload(){\n      loadMessages();\n    }\n    \n    \n    return (\n        <div style={{ height: '800px',  marginLeft: 100, marginRight: 20}} className={classes.root}>\n          <Grid container align-items=\"center\" style={{width: '100%',height: \"100%\" }}>\n              <Grid item xs align-items=\"right\" style={{display: 'flex', alignItems: 'center', justifyContent: 'right'}}>\n                <Button size =\"small\" variant=\"outlined\" color=\"primary\" onClick={reload} > RELOAD </Button>\n              </Grid>\n              <Grid item xs={12} style={{width: '100%', height: \"90%\" }}>\n                  <DataGrid\n                  rows={msgList}\n                  columns={columns}\n                  sortModel={[{ field: 'id', sort: 'desc' }]}\n                  pageSize={8}\n                  //   checkboxSelection\n                  disableSelectionOnClick/>\n              </Grid>\n          </Grid>\n          <DealViewQR data={QR} open={showQR} onClose={setShowQR}/>\n      </div>\n    );\n    \n}\n\nconst useStyles = makeStyles({\n  root: {\n    '& .super-app-theme--header': {\n      backgroundColor: '#3b5998',\n      color:'white',\n      fontFamily: \"Comic Sans MS\",\n      textTransform: 'capitalize'\n    }\n  }\n});\nexport default (Messages);\n\n\n"]},"metadata":{},"sourceType":"module"}