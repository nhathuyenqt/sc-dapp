{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/helper/AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { auth, db } from \"./Firebase\";\nimport accounts from './accounts.json';\nimport xtype from 'xtypejs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext();\nexport function useAuth() {\n  _s();\n\n  return useContext(AuthContext);\n}\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n\n  const [currentUser, setCurrentUser] = useState();\n  const [currentBCAccount, setCurrentBCAccount] = useState({\n    address: '',\n    privateKey: ''\n  });\n  const [loading, setLoading] = useState(true);\n  const [currentPass, setCurrentPass] = useState('');\n  const [keypair, setKeypair] = useState({\n    x: '',\n    y: ''\n  });\n  const [uid, setUid] = useState('');\n  const [balance, setBalance] = useState({\n    CL: '',\n    CR: '',\n    b: ''\n  }); //   function signup(email, password) {\n  //     return auth.createUserWithEmailAndPassword(email, password)\n  //   }\n\n  function login(email, password) {\n    setLoading(true);\n    setCurrentPass(password); // setCurrentAddress({...currentAddress, address: address});\n\n    auth.signInWithEmailAndPassword(email, password);\n  }\n\n  function logout() {\n    return auth.signOut();\n  }\n\n  async function getKey(uid, address) {\n    const response = await fetch(\"/fetchKey\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'uid': uid,\n        'address': address\n      })\n    });\n    let result;\n    await response.json().then(message => {\n      result = message[\"data\"]; // const y_value = result.y;\n      // const x_value = result.x;\n\n      setKeypair(result);\n      setBalance(message['balance']); // setSignKey(message['privateKey']);\n\n      setCurrentBCAccount({\n        address: address,\n        privateKey: message['privateKey']\n      });\n    });\n  }\n\n  function writeUserData(userId, name, email, imageUrl) {\n    db.ref('users/' + userId).set({\n      username: name,\n      email: email,\n      profile_picture: imageUrl\n    });\n  } //   function resetPassword(email) {\n  //     return auth.sendPasswordResetEmail(email)\n  //   }\n  //   function updateEmail(email) {\n  //     return currentUser.updateEmail(email)\n  //   }\n  //   function updatePassword(password) {\n  //     return currentUser.updatePassword(password)\n  //   }\n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setLoading(true);\n      setCurrentUser(user);\n\n      if (user) {\n        const docRef = db.collection(\"users\").doc(user.uid);\n        docRef.get().then(doc => {\n          if (doc.exists) {\n            const addr = doc.data().address;\n            setCurrentBCAccount({ ...currentBCAccount,\n              address: addr\n            }); // setSignKey()\n\n            getKey(user.uid, addr);\n          } else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n            setCurrentBCAccount({\n              address: '',\n              privateKey: ''\n            });\n            setKeypair({\n              x: '',\n              y: ''\n            });\n            setCurrentPass('');\n            setBalance({\n              CL: '',\n              CR: '',\n              b: ''\n            }); //getPubkey\n          }\n        }).catch(error => {\n          console.log(\"Error getting document:\", error);\n        });\n      } else {\n        setCurrentBCAccount({\n          address: '',\n          privateKey: ''\n        });\n        setKeypair({\n          x: '',\n          y: ''\n        });\n        setBalance({\n          CL: '',\n          CR: '',\n          b: ''\n        });\n      }\n\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    currentBCAccount,\n    currentPass,\n    keypair,\n    login,\n    loading,\n    balance,\n    // signup,\n    logout // resetPassword,\n    // updateEmail,\n    // updatePassword\n\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(AuthProvider, \"Rghhs6Bh0W9T20Gjla78tfsL1Cg=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/helper/AuthContext.js"],"names":["React","useContext","useState","useEffect","auth","db","accounts","xtype","AuthContext","createContext","useAuth","AuthProvider","children","currentUser","setCurrentUser","currentBCAccount","setCurrentBCAccount","address","privateKey","loading","setLoading","currentPass","setCurrentPass","keypair","setKeypair","x","y","uid","setUid","balance","setBalance","CL","CR","b","login","email","password","signInWithEmailAndPassword","logout","signOut","getKey","response","fetch","method","headers","body","JSON","stringify","result","json","then","message","writeUserData","userId","name","imageUrl","ref","set","username","profile_picture","unsubscribe","onAuthStateChanged","user","docRef","collection","doc","get","exists","addr","data","console","log","catch","error","value"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\"\nimport { auth, db } from \"./Firebase\"\nimport accounts from './accounts.json'\nimport xtype from 'xtypejs'\n\nconst AuthContext = React.createContext()\n\nexport function useAuth() {\n  return useContext(AuthContext)\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState()\n  const [currentBCAccount, setCurrentBCAccount] = useState({address:'', privateKey:''})\n  const [loading, setLoading] = useState(true)\n  const [currentPass, setCurrentPass] = useState('')\n  const [keypair, setKeypair] = useState({x:'', y:''})\n  const [uid, setUid] = useState('')\n  const [balance, setBalance] = useState({CL:'', CR:'', b:''})\n\n//   function signup(email, password) {\n//     return auth.createUserWithEmailAndPassword(email, password)\n//   }\n\n  function login(email, password) {\n    setLoading(true);\n    setCurrentPass(password)\n    \n    // setCurrentAddress({...currentAddress, address: address});\n    auth.signInWithEmailAndPassword(email, password)\n\n  }\n\n  function logout() {\n    return auth.signOut()\n  }\n\n  async function getKey(uid, address){\n    const response = await fetch(\"/fetchKey\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        'uid' : uid,\n        'address' :address\n      }),\n    })\n\n    let result\n    await response.json().then((message) => {\n      result = message[\"data\"];\n      // const y_value = result.y;\n      // const x_value = result.x;\n      setKeypair(result);\n      setBalance(message['balance'])\n      // setSignKey(message['privateKey']);\n      setCurrentBCAccount({address: address, privateKey:message['privateKey']});\n    });\n  }\n\n  function writeUserData(userId, name, email, imageUrl) {\n    db.ref('users/' + userId).set({\n      username: name,\n      email: email,\n      profile_picture : imageUrl\n    });\n  }\n\n//   function resetPassword(email) {\n//     return auth.sendPasswordResetEmail(email)\n//   }\n\n//   function updateEmail(email) {\n//     return currentUser.updateEmail(email)\n//   }\n\n//   function updatePassword(password) {\n//     return currentUser.updatePassword(password)\n//   }\n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      setLoading(true);\n      setCurrentUser(user)\n      if (user){\n        const docRef = db.collection(\"users\").doc(user.uid);\n        docRef.get().then((doc) => {\n        if (doc.exists) {\n            const addr = doc.data().address;\n            setCurrentBCAccount({...currentBCAccount, address:addr});\n            // setSignKey()\n            getKey(user.uid, addr);\n        }else {\n            // doc.data() will be undefined in this case\n            console.log(\"No such document!\");\n            setCurrentBCAccount({address:'', privateKey:''})\n            setKeypair({x:'', y:''})\n            setCurrentPass('')\n            setBalance({CL:'', CR:'', b:''})\n            //getPubkey\n\n          }\n          }).catch((error) => {\n            console.log(\"Error getting document:\", error);\n            \n            });\n      }else{\n        setCurrentBCAccount({address:'', privateKey:''})\n        setKeypair({x:'', y:''})\n        setBalance({CL:'', CR:'', b:''})\n      }\n      setLoading(false)\n    })\n\n      return unsubscribe\n    }, [])\n\n  const value = {\n    currentUser,\n    currentBCAccount,\n    currentPass,\n    keypair,\n    login,\n    loading,\n    balance,\n    // signup,\n    logout,\n    // resetPassword,\n    // updateEmail,\n    // updatePassword\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}