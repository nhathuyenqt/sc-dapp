{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Typography, Button, Card, CircularProgress, Container, CardActions, Grid, CardContent, TextField } from '@material-ui/core';\nimport QRCode from \"react-qr-code\";\nimport useStyles from './Styles.js';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport xtype from 'xtypejs';\nimport text from './../contract_address.json';\nimport { useAuth } from \"../helper/AuthContext\";\nimport Switch from '@material-ui/core/Switch';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = text['contract_address'];\n\nfunction Home(props) {\n  _s();\n\n  // const history = useHistory();\n  const {\n    currentBCAccount,\n    keypair,\n    loading,\n    balance\n  } = useAuth();\n  const classes = useStyles();\n  const [greeting, setGreetingValue] = useState('');\n  const [amount, setAmount] = useState();\n  const [recipient, setTo] = useState();\n  const [post, setPost] = useState(\"\");\n  const [balanceView, setBalanceView] = useState(true); // useEffect(() => {\n  //   requestAccount()\n  // });\n\n  if (window.ethereum) {\n    window.ethereum.on('accountsChanged', function (accounts) {});\n  } // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n\n  async function requestAccount() {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  } // const generateQrCode = async() => {\n  //   try{\n  //     const response = await QRCode.toDataURL('')\n  //   }catch(error){\n  //     console.log(error)\n  //   }\n  // }\n\n\n  async function setGreeting() {\n    if (!greeting) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.setGreeting(greeting);\n      await transaction.wait();\n      contract.on(\"TestMsg\", msg => {\n        console.log('Msg : ', msg);\n      });\n      fetchGreeting();\n    }\n  }\n\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n\n      try {\n        const data = await contract.greet();\n        setGreetingValue(data);\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  async function register() {\n    // setLoading(true)\n    if (typeof window.ethereum !== 'undefined') {\n      // await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      console.log(\"signer \", signer); // const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      // const transaction = await contract.register()\n      // var accounts = await provider.getAccounts();\n      // console.log(accounts[0])\n      // await transaction.wait()\n      // let a = '0'\n      // signer.getAddress().then((address) => {\n      //   a = address\n      // });\n      // let b = provider.getBalance(a)\n      // setAddress(a)\n      // getBalance()\n      // setLoading(false)\n      // \n    }\n  }\n\n  async function genProof() {\n    const response = await fetch(\"/genProof\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        amt: amount\n      })\n    });\n    let result;\n    await response.json().then(message => {\n      result = JSON.stringify(message[\"data\"]);\n      console.log(result);\n    });\n    return result;\n  }\n\n  async function getElBalance() {\n    const response = await fetch(\"/getElBalance\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'x': keypair.x,\n        'y': keypair.y,\n        'user_key': currentBCAccount.privateKey\n      })\n    }); // setLoading(false)\n    // const provider = new ethers.providers.Web3Provider(window.ethereum)\n    // const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n    // const signer =  provider.getSigner()\n    // const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n    // const acc = signer.getAddress()\n    // const b = await contract.ElBalanceOf(y)\n    // console.log('address: ', acc)\n    // console.log('balance: ', b.toString())\n    // setBalance(b.toString())\n    // setLoading(false)\n  }\n\n  async function genConfProof() {\n    const response = await fetch(\"/genConfProof\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'privateKey': currentBCAccount.privateKey,\n        'user_address': currentBCAccount.address,\n        'y_sender': keypair.y,\n        'y_recipient': recipient,\n        'amt': amount,\n        'b_after': 197,\n        'x_sender': keypair.x\n      })\n    }); // setLoading(false)\n\n    let result;\n    await response.json().then(message => {\n      result = message;\n    });\n    return result;\n  }\n\n  async function newPost() {\n    const response = await fetch(\"/newPost\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'privateKey': currentBCAccount.privateKey,\n        'pubkey': keypair.y,\n        'content': post\n      })\n    });\n  }\n\n  async function confTransfer() {\n    let messageProof = await genConfProof();\n    console.log(messageProof);\n\n    if (messageProof['code'] !== 200) {\n      const err = messageProof['err'];\n      return 0; // if (typeof window.ethereum !== \"undefined\") {\n      //   await requestAccount();\n      //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n      //   const signer = provider.getSigner();\n      //   const contract = new ethers.Contract(\n      //     contractAddress,\n      //     XContract.abi,\n      //     signer\n      //   );\n      //   // function sendPrivateToken(function() {\n      //   //   console.log('huzzah, I\\'m done!');\n      //   // });\n      //   let messageProof = await genConfProof();\n      //   console.log(messageProof);\n      //   if (messageProof['code'] != 200){\n      //     const err = messageProof['err']\n      //     setNoti(err);\n      //     return 0\n      //   }\n\n      const pr1 = JSON.stringify(messageProof['rangeProofForAmt']);\n      const pr2 = JSON.stringify(messageProof['rangeProofForRemainBalance']);\n      const pr3 = JSON.stringify(messageProof['sigmaProtocol']);\n      const data = JSON.stringify(messageProof['input']); // let msg2 = JSON.stringify(messageProof)\n      // console.log(msg2)\n      // // msg2 =  \"hello\"ßßßßßßßßß\n      // const transaction = await contract.confTransfer(pr1, pr2, pr3, data);\n      // \n    }\n  }\n\n  async function sendCoins() {\n    var messageProof;\n\n    if (typeof window.ethereum !== 'undefined') {\n      fetch(\"/genProof\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          amt: amount\n        })\n      }).then(response => response.json()).then(message => {\n        messageProof = JSON.stringify(message['data']);\n        console.log(messageProof);\n        console.log(\"Check type of Proof: \", xtype(messageProof));\n      });\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.transfer(recipient, amount); // const transaction = await contract.privateTransfer(messageProof)\n      // await transaction.wait()\n\n      contract.on(\"UpdateState\", (add, newBal) => {\n        console.log(\"sender \", add);\n        console.log(\"new Balance \", newBal.toString());\n      });\n    }\n  }\n\n  return loading == true ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n    size: 24,\n    className: classes.buttonProgress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 24\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      align: \"center\",\n      variant: \"h4\",\n      children: \" Master Internship \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      align: \"center\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxwidth: \"sm\",\n      className: classes.cardGrid,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxwidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Account \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex'\n                },\n                children: [/*#__PURE__*/_jsxDEV(QRCode, {\n                  value: keypair.y,\n                  size: 110\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    style: {\n                      display: 'flex',\n                      marginLeft: '10px'\n                    },\n                    gutterBottom: true,\n                    variant: \"subtitle2\",\n                    children: [\" \", currentBCAccount.address, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    style: {\n                      display: 'flex',\n                      marginLeft: '10px'\n                    },\n                    gutterBottom: true,\n                    variant: \"subtitle2\",\n                    children: [\" \", keypair.y, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 309,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxwidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex'\n                },\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  \"align-items\": \"center\",\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: \"Raw\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: /*#__PURE__*/_jsxDEV(Switch, {\n                      checked: balanceView,\n                      onChange: e => setBalanceView(e.target.checked),\n                      name: \"checkedA\",\n                      inputProps: {\n                        'aria-label': 'secondary checkbox'\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 341,\n                      columnNumber: 21\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: \"Encrypted\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 348,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 15\n              }, this), balanceView ? /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: [\"(\", balance.CL, \" \", balance.CR, \") \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 16\n              }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: [\" \", balance.b, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 16\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setTo(e.target.value),\n                placeholder: \"Recipient Public Key\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\" // defaultValue = {recipient}\n                ,\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAmount(e.target.value),\n                placeholder: \"Amount\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field,\n                defaultValue: 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getElBalance,\n                children: \"Get El Balance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: confTransfer,\n                children: \"Conf Transfer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxwidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" New post \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setPost(e.target.value),\n                placeholder: \"Task\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field,\n                defaultValue: post\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: newPost,\n                children: \"Post new task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"mJLXkdLIglsaa8LpNMB4FuAmlgw=\", false, function () {\n  return [useAuth, useStyles];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/pages/Home.js"],"names":["React","Typography","Button","Card","CircularProgress","Container","CardActions","Grid","CardContent","TextField","QRCode","useStyles","useState","useEffect","ethers","xtype","text","useAuth","Switch","XContract","contractAddress","Home","props","currentBCAccount","keypair","loading","balance","classes","greeting","setGreetingValue","amount","setAmount","recipient","setTo","post","setPost","balanceView","setBalanceView","window","ethereum","on","accounts","requestAccount","request","method","setGreeting","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","wait","msg","console","log","fetchGreeting","data","greet","err","register","genProof","response","fetch","headers","body","JSON","stringify","amt","result","json","then","message","getElBalance","x","y","privateKey","genConfProof","address","newPost","confTransfer","messageProof","pr1","pr2","pr3","sendCoins","transfer","add","newBal","toString","buttonProgress","cardGrid","card","cardContent","display","marginLeft","e","target","checked","CL","CR","b","value","field"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport {Typography, Button, Card,  CircularProgress, Container, CardActions, Grid, CardContent, TextField} from '@material-ui/core'\nimport QRCode from \"react-qr-code\";\nimport  useStyles  from './Styles.js';\n\nimport {useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport xtype from 'xtypejs'\nimport text  from './../contract_address.json';\nimport { useAuth } from \"../helper/AuthContext\"\n\nimport Switch from '@material-ui/core/Switch';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'\n\n\nconst contractAddress = text['contract_address']\n\nfunction Home(props) {\n  // const history = useHistory();\n\n\n  const { currentBCAccount, keypair, loading, balance} = useAuth()\n\n  const classes = useStyles()\n\n  const [greeting, setGreetingValue] = useState('')\n  const [amount, setAmount] = useState()\n  const [recipient, setTo] = useState()\n  const [post, setPost] = useState(\"\")\n  const [balanceView, setBalanceView] = useState(true);\n\n\n  // useEffect(() => {\n  //   requestAccount()\n  // });\n  if (window.ethereum){\n    window.ethereum.on('accountsChanged', function(accounts){\n \n\n    })\n  }\n\n  // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n  async function requestAccount(){\n    const accounts = await window.ethereum.request({method : 'eth_requestAccounts'})\n  }\n\n\n\n  // const generateQrCode = async() => {\n  //   try{\n  //     const response = await QRCode.toDataURL('')\n  //   }catch(error){\n  //     console.log(error)\n  //   }\n  // }\n  \n  async function setGreeting(){\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined'){\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n\n      contract.on(\"TestMsg\", (msg) => {\n        console.log('Msg : ', msg);\n      });\n\n      fetchGreeting()\n    }\n  }\n\n  \n  async function fetchGreeting(){\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      try{\n        const data = await contract.greet()\n        setGreetingValue(data)\n        console.log('data: ', data)\n      } catch(err){\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n\n \n\n  async function register(){\n    // setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      // await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      console.log(\"signer \", signer)\n      // const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      // const transaction = await contract.register()\n      // var accounts = await provider.getAccounts();\n      // console.log(accounts[0])\n      // await transaction.wait()\n      // let a = '0'\n      // signer.getAddress().then((address) => {\n      //   a = address\n      // });\n      // let b = provider.getBalance(a)\n      // setAddress(a)\n      \n      // getBalance()\n      // setLoading(false)\n      // \n    }\n  }\n\n  async function genProof() {\n    const response = await fetch(\"/genProof\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        amt: amount,\n      }),\n    })\n    let result\n    await response.json().then((message) => {\n      result = JSON.stringify(message[\"data\"]);\n     \n      console.log(result) \n    });\n    return result\n  }\n\n  async function getElBalance(){\n\n      const response = await fetch(\"/getElBalance\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          'x' : keypair.x,\n          'y' : keypair.y,\n          'user_key':currentBCAccount.privateKey\n        }),\n      })\n      // setLoading(false)\n      // const provider = new ethers.providers.Web3Provider(window.ethereum)\n      // const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      // const signer =  provider.getSigner()\n      // const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      // const acc = signer.getAddress()\n      // const b = await contract.ElBalanceOf(y)\n      // console.log('address: ', acc)\n      // console.log('balance: ', b.toString())\n      // setBalance(b.toString())\n      // setLoading(false)\n    \n  }\n\n  async function genConfProof() {\n\n      const response = await fetch(\"/genConfProof\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          'privateKey': currentBCAccount.privateKey,\n          'user_address': currentBCAccount.address,\n          'y_sender': keypair.y,\n          'y_recipient': recipient,\n          'amt':amount,\n          'b_after':197,\n          'x_sender': keypair.x\n        }),\n      })\n      // setLoading(false)\n      let result\n      await response.json().then((message) => {\n        result = message\n      });\n      return result\n  }\n  async function newPost() {\n\n      const response = await fetch(\"/newPost\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          'privateKey': currentBCAccount.privateKey,\n          'pubkey' : keypair.y,\n          'content':post\n        }),\n      })\n\n  }\n\n  async function confTransfer() {\n\n    let messageProof = await genConfProof();\n      console.log(messageProof);\n      if (messageProof['code'] !== 200){\n        const err = messageProof['err']\n        return 0\n\n    // if (typeof window.ethereum !== \"undefined\") {\n    //   await requestAccount();\n    //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n    //   const signer = provider.getSigner();\n    //   const contract = new ethers.Contract(\n    //     contractAddress,\n    //     XContract.abi,\n    //     signer\n    //   );\n    //   // function sendPrivateToken(function() {\n    //   //   console.log('huzzah, I\\'m done!');\n    //   // });\n    //   let messageProof = await genConfProof();\n    //   console.log(messageProof);\n    //   if (messageProof['code'] != 200){\n    //     const err = messageProof['err']\n    //     setNoti(err);\n    //     return 0\n    //   }\n  \n      const pr1 = JSON.stringify(messageProof['rangeProofForAmt'])\n      const pr2 = JSON.stringify(messageProof['rangeProofForRemainBalance'])\n      const pr3 = JSON.stringify(messageProof['sigmaProtocol'])\n      const data = JSON.stringify(messageProof['input'])\n      // let msg2 = JSON.stringify(messageProof)\n      // console.log(msg2)\n      // // msg2 =  \"hello\"ßßßßßßßßß\n      // const transaction = await contract.confTransfer(pr1, pr2, pr3, data);\n      // \n\n      \n    }\n  }\n  \n  async function sendCoins(){\n    var messageProof\n    if (typeof window.ethereum !== 'undefined'){\n\n      fetch(\"/genProof\",\n        {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                amt: amount\n            }),\n        }).then((response) => response.json())\n        .then((message) => {\n          messageProof = JSON.stringify(message['data'])\n          console.log(messageProof)\n          console.log(\"Check type of Proof: \", xtype(messageProof))\n        });\n     \n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.transfer(recipient, amount)\n      // const transaction = await contract.privateTransfer(messageProof)\n      \n      // await transaction.wait()\n      \n      contract.on(\"UpdateState\", (add, newBal) => {\n   \n          console.log(\"sender \", add)\n          console.log(\"new Balance \", newBal.toString())\n          \n       \n      });\n    }\n  }\n\n  return (\n    loading == true ? (<CircularProgress size={24} className={classes.buttonProgress} />) : (\n    <div className='home'>\n      <Typography align='center' variant = \"h4\"> Master Internship </Typography>\n      <h1 align='center'>Home</h1>\n      <Container maxwidth = \"sm\" className = {classes.cardGrid}> \n        <Grid container spacing ={4}>\n          <Grid item> \n            <Card className ={classes.card} maxwidth = \"md\">\n              {/* <CardMedia \n                className ={classes.cardMedia}\n                  image =\"https://source.unsplash.com/random\"\n                  title=\"Image title\" /> */}\n\n              <CardContent className = {classes.cardContent}>\n                <Typography gutterBottom variant = \"h5\"> Account </Typography>\n                \n                {/* <Dimmer active inverted>\n                  <Loader>Loading</Loader>\n                </Dimmer> */}\n                \n                <div style={{display: 'flex'}}>\n                  <QRCode value={keypair.y} size={110}/>\n                  <div>\n                    <Typography style={{display: 'flex', marginLeft: '10px'}} gutterBottom variant = \"subtitle2\"> {currentBCAccount.address} </Typography>\n                    <Typography style={{display: 'flex', marginLeft: '10px'}} gutterBottom variant = \"subtitle2\"> {keypair.y} </Typography> \n                  </div>\n\n                </div>\n                {/* <input \n                  onChange={e => setGreetingValue(e.target.value)} \n                  placeholder=\"Set greeting\"\n                  value = {greeting}\n                /> */}\n    \n              </CardContent>\n              <CardActions>\n               \n\n                \n                \n              </CardActions>\n            </Card>\n          </Grid>\n          <Grid item>\n              <Card className ={classes.card} maxwidth = \"md\">\n            {/* <CardMedia \n              className ={classes.cardMedia}\n                image =\"https://source.unsplash.com/random\"\n                title=\"Image title\" /> */}\n\n            <CardContent className = {classes.cardContent}>\n              <Typography gutterBottom variant = \"h5\"> Balance </Typography>\n              <div style={{display: 'flex'}}>\n                <Grid container align-items=\"center\" spacing={2}>\n                  <Grid item>Raw</Grid>\n                  <Grid item >\n                    <Switch\n                   \n                          checked={balanceView}\n                          onChange={e => setBalanceView(e.target.checked)}\n                          name=\"checkedA\"\n                          inputProps={{ 'aria-label': 'secondary checkbox' }}           />\n                  </Grid>\n                  <Grid item>Encrypted</Grid>\n                </Grid>\n              </div>\n              {balanceView ?\n              (<Typography variant = \"subtitle2\" gutterBottom>({balance.CL} {balance.CR}) </Typography>):\n              (<Typography variant = \"subtitle2\" gutterBottom> {balance.b} </Typography>)}\n              <TextField onChange={e => setTo(e.target.value)} placeholder=\"Recipient Public Key\" \n                    variant='outlined'\n                    fullWidth\n                    color =\"secondary\"\n                    // defaultValue = {recipient}\n                    className={classes.field}/>\n              <TextField onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                  defaultValue = {1}\n                /> \n            </CardContent>\n            <CardActions>\n              <Button size =\"small\" color=\"primary\" onClick={getElBalance} >Get El Balance</Button>\n              <Button size =\"small\" color=\"primary\" onClick={confTransfer} >Conf Transfer</Button>\n            </CardActions>\n          </Card>\n          </Grid>\n          <Grid item>\n              <Card className ={classes.card} maxwidth = \"md\">\n            {/* <CardMedia \n              className ={classes.cardMedia}\n                image =\"https://source.unsplash.com/random\"\n                title=\"Image title\" /> */}\n\n            <CardContent className = {classes.cardContent}>\n              <Typography gutterBottom variant = \"h5\"> New post </Typography>\n              <TextField onChange={e => setPost(e.target.value)} placeholder=\"Task\" variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                  defaultValue = {post}\n                /> \n            </CardContent>\n            <CardActions>\n              <Button size =\"small\" color=\"primary\" onClick={newPost} >Post new task</Button>\n            </CardActions>\n          </Card>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>)\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}