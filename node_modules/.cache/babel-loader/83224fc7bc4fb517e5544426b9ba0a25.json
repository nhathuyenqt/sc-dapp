{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/pages/components/QRscanner.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Typography, Button, TextField, Grid } from '@material-ui/core';\nimport { Fab, TextareaAutosize } from '@material-ui/core';\nimport { ArrowBack } from '@material-ui/icons';\nimport QRCode from \"react-qr-code\";\nimport { useState, useEffect, useRef } from 'react';\nimport QrReader from 'react-qr-reader';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction QRscanner(props) {\n  _s();\n\n  const [text, setText] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [scanResultFile, setScanResultFile] = useState('');\n  const [scanResultWebCam, setScanResultWebCam] = useState('');\n  const qrRef = useRef(null);\n  const {\n    onClose,\n    open,\n    setData\n  } = props;\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const onScanFile = () => {\n    qrRef.current.openImageDialog();\n  };\n\n  const handleErrorWebCam = error => {\n    console.log(error);\n  };\n\n  const handleScanWebCam = result => {\n    if (result) {\n      setScanResultWebCam(result);\n      setData(result);\n      onClose();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    \"aria-labelledby\": \"alert-dialog-title\",\n    fullWidth: true,\n    maxWidth: \"xs\",\n    onClose: handleClose,\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      style: {\n        backgroundColor: 'rgba(220, 241, 229, 0.57)',\n        color: 'rgba(9, 91, 11, 0.86)'\n      },\n      id: \"alert-dialog-title\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        fullWidth: true,\n        margin: \"dense\",\n        variant: \"subtitle1\",\n        children: \"Scan public key of Recipient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QrReader, {\n      delay: 300,\n      style: {\n        width: '100%'\n      },\n      onError: handleErrorWebCam,\n      onScan: handleScanWebCam\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        display: 'flex',\n        margin: '5px'\n      },\n      align: \"center\",\n      gutterBottom: true,\n      variant: \"subtitle2\",\n      children: [\" \", scanResultWebCam]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n}\n\n_s(QRscanner, \"Npz5tyeZZ9NPG2mvgdc/1SUsrHE=\");\n\n_c = QRscanner;\nQRscanner.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  setData: PropTypes.func.isRequired\n};\nexport default QRscanner;\n\nvar _c;\n\n$RefreshReg$(_c, \"QRscanner\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/pages/components/QRscanner.js"],"names":["React","Typography","Button","TextField","Grid","Fab","TextareaAutosize","ArrowBack","QRCode","useState","useEffect","useRef","QrReader","PropTypes","Dialog","DialogTitle","QRscanner","props","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","qrRef","onClose","open","setData","handleClose","onScanFile","current","openImageDialog","handleErrorWebCam","error","console","log","handleScanWebCam","result","backgroundColor","color","width","display","margin","propTypes","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Typography, Button, TextField, Grid} from '@material-ui/core'\nimport {Fab, TextareaAutosize} from '@material-ui/core'\nimport {ArrowBack} from '@material-ui/icons'\nimport QRCode from \"react-qr-code\";\nimport {useState, useEffect, useRef} from 'react'\nimport QrReader from 'react-qr-reader';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nfunction QRscanner(props) {\n\n    const [text, setText] = useState('');\n    const [imageUrl, setImageUrl] = useState('');\n    const [scanResultFile, setScanResultFile] = useState('');\n    const [scanResultWebCam, setScanResultWebCam] =  useState('');\n    const qrRef = useRef(null);\n\n    const { onClose, open, setData } = props;\n\n    const handleClose = () => {\n      onClose();\n    };\n\n    const onScanFile = () => {\n        qrRef.current.openImageDialog();\n      }\n      const handleErrorWebCam = (error) => {\n        console.log(error);\n      }\n      const handleScanWebCam = (result) => {\n        if (result){\n            setScanResultWebCam(result);\n            setData(result);\n            onClose();\n        }\n      }\n\n    return (\n      <Dialog aria-labelledby=\"alert-dialog-title\" fullWidth maxWidth='xs' onClose={handleClose} open={open}>\n            <DialogTitle  style={{ backgroundColor: 'rgba(220, 241, 229, 0.57)', color: 'rgba(9, 91, 11, 0.86)' }} id=\"alert-dialog-title\">\n                <Typography fullWidth margin=\"dense\" variant=\"subtitle1\" >Scan public key of Recipient</Typography>\n            </DialogTitle>\n\n              <QrReader\n              delay={300}\n              style={{width: '100%'}}\n              onError={handleErrorWebCam}\n              onScan={handleScanWebCam}\n                />\n              <Typography style={{display: 'flex', margin: '5px'}} align='center' gutterBottom variant = \"subtitle2\"> {scanResultWebCam}</Typography> \n                  \n\n      </Dialog>\n    );\n  }\n  \nQRscanner.propTypes = {\n   onClose: PropTypes.func.isRequired,\n   open: PropTypes.bool.isRequired,\n   setData : PropTypes.func.isRequired\n };\n\nexport default QRscanner;"]},"metadata":{},"sourceType":"module"}