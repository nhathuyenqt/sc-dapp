{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/sc-dapp/src/components/CryptoCard/CryptoChart/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport _ from 'lodash';\nimport config from './config';\nimport styles from './styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CryptoChart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let {\n      chartColor,\n      chartData\n    } = this.props;\n    let datasets = [Object.assign({}, config.datasets)];\n    _.head(datasets).data = chartData;\n    let data = {\n      datasets,\n      labels: Object.keys(chartData)\n    };\n\n    const dataFun = canvas => {\n      const ctx = canvas.getContext('2d');\n      const gradient = ctx.createLinearGradient(50, 0, 50, canvas.height * 1.1);\n      gradient.addColorStop(0, 'rgba(236, 240, 241, 0.1)');\n      gradient.addColorStop(1, 'rgba(236, 240, 241, 0)');\n\n      let firstDataset = _.head(data.datasets);\n\n      firstDataset.borderColor = chartColor || firstDataset.borderColor;\n      firstDataset.backgroundColor = gradient;\n      return data;\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['crypto-chart'],\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: dataFun,\n        options: config.options,\n        height: 128\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nCryptoChart.propTypes = {\n  chartColor: PropTypes.string,\n  chartData: PropTypes.array\n};\nexport default CryptoChart;","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/sc-dapp/src/components/CryptoCard/CryptoChart/index.js"],"names":["React","PropTypes","Line","_","config","styles","CryptoChart","Component","constructor","props","render","chartColor","chartData","datasets","Object","assign","head","data","labels","keys","dataFun","canvas","ctx","getContext","gradient","createLinearGradient","height","addColorStop","firstDataset","borderColor","backgroundColor","options","propTypes","string","array"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;;AAEA,MAAMC,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI;AACFC,MAAAA,UADE;AAEFC,MAAAA;AAFE,QAGA,KAAKH,KAHT;AAKA,QAAII,QAAQ,GAAG,CACbC,MAAM,CAACC,MAAP,CAAc,EAAd,EACEX,MAAM,CAACS,QADT,CADa,CAAf;AAKAV,IAAAA,CAAC,CAACa,IAAF,CAAOH,QAAP,EAAiBI,IAAjB,GAAwBL,SAAxB;AAEA,QAAIK,IAAI,GAAG;AACTJ,MAAAA,QADS;AAETK,MAAAA,MAAM,EAAEJ,MAAM,CAACK,IAAP,CAAYP,SAAZ;AAFC,KAAX;;AAKA,UAAMQ,OAAO,GAAGC,MAAM,IAAI;AACxB,YAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,YAAMC,QAAQ,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,EAAzB,EAA6B,CAA7B,EAAgC,EAAhC,EAAoCJ,MAAM,CAACK,MAAP,GAAc,GAAlD,CAAjB;AACAF,MAAAA,QAAQ,CAACG,YAAT,CAAsB,CAAtB,EAAyB,0BAAzB;AACAH,MAAAA,QAAQ,CAACG,YAAT,CAAsB,CAAtB,EAAyB,wBAAzB;;AAEA,UAAIC,YAAY,GAAGzB,CAAC,CAACa,IAAF,CAAOC,IAAI,CAACJ,QAAZ,CAAnB;;AACAe,MAAAA,YAAY,CAACC,WAAb,GAA2BlB,UAAU,IAAIiB,YAAY,CAACC,WAAtD;AACAD,MAAAA,YAAY,CAACE,eAAb,GAA+BN,QAA/B;AAEA,aAAOP,IAAP;AACD,KAXD;;AAaA,wBACE;AAAK,MAAA,SAAS,EAAEZ,MAAM,CAAC,cAAD,CAAtB;AAAA,6BACE,QAAC,IAAD;AACE,QAAA,IAAI,EAAEe,OADR;AAEE,QAAA,OAAO,EAAEhB,MAAM,CAAC2B,OAFlB;AAGE,QAAA,MAAM,EAAE;AAHV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AA7CuC;;AAgD1CzB,WAAW,CAAC0B,SAAZ,GAAwB;AACtBrB,EAAAA,UAAU,EAAEV,SAAS,CAACgC,MADA;AAEtBrB,EAAAA,SAAS,EAAEX,SAAS,CAACiC;AAFC,CAAxB;AAKA,eAAe5B,WAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport _ from 'lodash';\n\nimport config from './config';\nimport styles from './styles.scss';\n\nclass CryptoChart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let {\n      chartColor,\n      chartData\n    } = this.props;\n\n    let datasets = [\n      Object.assign({},\n        config.datasets\n      )\n    ];\n    _.head(datasets).data = chartData;\n\n    let data = {\n      datasets,\n      labels: Object.keys(chartData)\n    };\n\n    const dataFun = canvas => {\n      const ctx = canvas.getContext('2d');\n      const gradient = ctx.createLinearGradient(50, 0, 50, canvas.height*1.1);\n      gradient.addColorStop(0, 'rgba(236, 240, 241, 0.1)');\n      gradient.addColorStop(1, 'rgba(236, 240, 241, 0)');\n\n      let firstDataset = _.head(data.datasets);\n      firstDataset.borderColor = chartColor || firstDataset.borderColor;\n      firstDataset.backgroundColor = gradient;\n\n      return data;\n    };\n\n    return (\n      <div className={styles['crypto-chart']}>\n        <Line\n          data={dataFun}\n          options={config.options}\n          height={128}\n        />\n      </div>\n    );\n  }\n}\n\nCryptoChart.propTypes = {\n  chartColor: PropTypes.string,\n  chartData: PropTypes.array\n};\n\nexport default CryptoChart;\n"]},"metadata":{},"sourceType":"module"}