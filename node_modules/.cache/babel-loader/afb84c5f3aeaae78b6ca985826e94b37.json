{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/sc-dapp/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Typography, Button, AppBar, Spinner, Card, CircularProgress, Container, CardActions, Grid, CardContent, CardMedia, TextField } from '@material-ui/core';\nimport useStyles from './Styles.js';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport xtype from 'xtypejs';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x59D145690a0665b17785D0eF0e13f05CE9E850c1'; // rinkeby\n// const contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3'\n\nvar loading = false;\n\nfunction Home() {\n  _s();\n\n  const classes = useStyles();\n  const [greeting, setGreetingValue] = useState('');\n  const [userAccount, setUserAccount] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [balance, setBalance] = useState();\n  const [amount, setAmount] = useState();\n  const [recipient, setTo] = useState(\"0xC5e65BF63b33B865e78A02b13f0db60713c3Ff96\");\n  const [currentTime, setCurrentTime] = useState(0);\n  const storage = useEffect(() => {\n    fetch('/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n  }, []); // useEffect(() => {\n  //   requestAccount()\n  // });\n\n  if (window.ethereum) {\n    window.ethereum.on('accountsChanged', function (accounts) {\n      setUserAccount(accounts[0]);\n    });\n  } // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n\n  async function requestAccount() {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    console.log(accounts[0]);\n    setUserAccount(accounts[0]);\n  } // function getAccounts(callback) {\n  //   web3.eth.getAccounts((error,result) => {\n  //       if (error) {\n  //           console.log(error);\n  //       } else {\n  //           callback(result);\n  //       }\n  //   });\n  // }\n\n\n  async function setGreeting() {\n    if (!greeting) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.setGreeting(greeting);\n      await transaction.wait();\n      contract.on(\"TestMsg\", msg => {\n        console.log('Msg : ', msg);\n      });\n      fetchGreeting();\n    }\n  }\n\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n\n      try {\n        const data = await contract.greet();\n        setGreetingValue(data);\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  async function getBalance() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n      const signer = provider.getSigner();\n      const [account] = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const acc = signer.getAddress();\n      const b = await contract.balanceOf(account); // setAmount(balance.toString())\n\n      console.log('provider: ', provider);\n      console.log('signer: ', signer);\n      console.log('address: ', acc);\n      console.log('balance: ', b.toString());\n      setBalance(b.toString());\n      setLoading(false);\n    }\n  }\n\n  async function register() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      // await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.register(); // var accounts = await provider.getAccounts();\n      // console.log(accounts[0])\n      // await transaction.wait()\n      // let a = '0'\n      // signer.getAddress().then((address) => {\n      //   a = address\n      // });\n      // let b = provider.getBalance(a)\n      // setAddress(a)\n\n      getBalance(); // setLoading(false)\n      // \n    }\n  }\n\n  async function genProof() {\n    fetch(\"/genProof\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        amt: amount\n      })\n    }).then(response => response.json()).then(message => {\n      var msg2 = JSON.stringify(message['data']);\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(\"wait me \", msg2);\n          resolve(msg2);\n        }, 2000);\n      });\n    });\n  }\n\n  async function sendPrivateToken() {\n    if (typeof window.ethereum !== 'undefined') {\n      var messageProof = await genProof();\n      console.log(\"Check type of Proof 1 : \", xtype(messageProof));\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.privateTransfer(messageProof);\n    }\n  }\n\n  async function sendCoins() {\n    var messageProof;\n\n    if (typeof window.ethereum !== 'undefined') {\n      fetch(\"/genProof\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          amt: amount\n        })\n      }).then(response => response.json()).then(message => {\n        messageProof = JSON.stringify(message['data']);\n        console.log(messageProof);\n        console.log(\"Check type of Proof: \", xtype(messageProof));\n      });\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.transfer(recipient, amount); // const transaction = await contract.privateTransfer(messageProof)\n      // await transaction.wait()\n\n      contract.on(\"UpdateState\", (add, newBal) => {\n        console.log(\"sender \", add);\n        console.log(\"new Balance \", newBal.toString());\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: \" Nhat Huyen's Internship \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The current time is \", currentTime, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      className: classes.cardGrid,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxWidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Account \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                textAlign: \"left\",\n                children: [\" \", userAccount, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                textAlign: \"left\",\n                children: [\" \", greeting]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setGreetingValue(e.target.value),\n                placeholder: \"Set greeting\",\n                value: greeting,\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: register,\n                children: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: setGreeting,\n                children: \"Set\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getBalance,\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxWidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 15\n              }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24,\n                className: classes.buttonProgress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                children: [\" \", balance]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setTo(e.target.value),\n                placeholder: \"Recipient Account ID\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                value: recipient,\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAmount(e.target.value),\n                placeholder: \"Amount\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getBalance,\n                children: \" Get Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: sendCoins,\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: sendPrivateToken,\n                children: \"Send Token\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 296,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"jZOmfwiw0yvCi13hTSkr8uYlFfM=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/sc-dapp/src/pages/Home.js"],"names":["React","Typography","Button","AppBar","Spinner","Card","CircularProgress","Container","CardActions","Grid","CardContent","CardMedia","TextField","useStyles","useState","useEffect","ethers","xtype","XContract","contractAddress","loading","Home","classes","greeting","setGreetingValue","userAccount","setUserAccount","setLoading","balance","setBalance","amount","setAmount","recipient","setTo","currentTime","setCurrentTime","storage","fetch","then","res","json","data","time","window","ethereum","on","accounts","requestAccount","request","method","console","log","setGreeting","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","wait","msg","fetchGreeting","greet","err","getBalance","account","acc","getAddress","b","balanceOf","toString","register","genProof","headers","body","JSON","stringify","amt","response","message","msg2","Promise","resolve","setTimeout","sendPrivateToken","messageProof","privateTransfer","sendCoins","transfer","add","newBal","cardGrid","card","cardContent","e","target","value","field","buttonProgress"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport {Typography, Button, AppBar, Spinner, Card,  CircularProgress, Container, CardActions, Grid, CardContent, CardMedia, TextField} from '@material-ui/core'\n\nimport  useStyles  from './Styles.js';\nimport {useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport xtype from 'xtypejs'\n\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'\n\n\nconst contractAddress = '0x59D145690a0665b17785D0eF0e13f05CE9E850c1' // rinkeby\n// const contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3'\nvar loading = false;\n\nfunction Home() {\n  const classes = useStyles()\n\n  const [greeting, setGreetingValue] = useState('')\n  const [userAccount, setUserAccount] = useState('')\n  const [loading, setLoading] = useState(false);\n  const [balance, setBalance] = useState()\n  const [amount, setAmount] = useState()\n  const [recipient, setTo] = useState(\"0xC5e65BF63b33B865e78A02b13f0db60713c3Ff96\")\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const storage = \n  useEffect(() => {\n    fetch('/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n  }, []);\n\n  // useEffect(() => {\n  //   requestAccount()\n  // });\n  if (window.ethereum){\n    window.ethereum.on('accountsChanged', function(accounts){\n      setUserAccount(accounts[0])\n    })\n  }\n  // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n  async function requestAccount(){\n    const accounts = await window.ethereum.request({method : 'eth_requestAccounts'})\n    console.log(accounts[0]);\n    setUserAccount(accounts[0])\n\n  }\n  // function getAccounts(callback) {\n  //   web3.eth.getAccounts((error,result) => {\n  //       if (error) {\n  //           console.log(error);\n  //       } else {\n  //           callback(result);\n  //       }\n  //   });\n  // }\n  \n\n  async function setGreeting(){\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined'){\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n\n      contract.on(\"TestMsg\", (msg) => {\n        console.log('Msg : ', msg);\n      });\n\n      fetchGreeting()\n    }\n  }\n  async function fetchGreeting(){\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      try{\n        const data = await contract.greet()\n        setGreetingValue(data)\n        console.log('data: ', data)\n      } catch(err){\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n\n  async function getBalance(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      const signer =  provider.getSigner()\n      const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      const acc = signer.getAddress()\n      const b = await contract.balanceOf(account)\n      // setAmount(balance.toString())\n      console.log('provider: ', provider)\n      console.log('signer: ', signer)\n      console.log('address: ', acc)\n      console.log('balance: ', b.toString())\n      setBalance(b.toString())\n      setLoading(false)\n    }\n  }\n\n  async function register(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      // await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.register()\n      // var accounts = await provider.getAccounts();\n      // console.log(accounts[0])\n      // await transaction.wait()\n      // let a = '0'\n      // signer.getAddress().then((address) => {\n      //   a = address\n      // });\n      // let b = provider.getBalance(a)\n      // setAddress(a)\n      \n      getBalance()\n      // setLoading(false)\n      // \n    }\n  }\n\n  \n  \n  async function genProof(){\n    fetch(\"/genProof\",\n        {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                amt: amount\n            }),\n        }).then((response) => response.json())\n        .then((message) => {\n          var msg2=JSON.stringify(message['data'])\n          \n          return new Promise(resolve => {\n            setTimeout(() => {\n              console.log(\"wait me \", msg2)\n              resolve(msg2);\n            }, 2000);\n          });\n          \n        })\n  }\n\n  async function sendPrivateToken(){\n    \n    if (typeof window.ethereum !== 'undefined'){\n\n      var messageProof = await genProof()\n      console.log(\"Check type of Proof 1 : \", xtype(messageProof))\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n\n      const transaction = await contract.privateTransfer(messageProof)\n      \n \n    }\n  }\n\n  async function sendCoins(){\n    var messageProof\n    if (typeof window.ethereum !== 'undefined'){\n\n      fetch(\"/genProof\",\n        {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                amt: amount\n            }),\n        }).then((response) => response.json())\n        .then((message) => {\n          messageProof = JSON.stringify(message['data'])\n          console.log(messageProof)\n          console.log(\"Check type of Proof: \", xtype(messageProof))\n        });\n     \n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.transfer(recipient, amount)\n      // const transaction = await contract.privateTransfer(messageProof)\n      \n      // await transaction.wait()\n      \n      contract.on(\"UpdateState\", (add, newBal) => {\n   \n          console.log(\"sender \", add)\n          console.log(\"new Balance \", newBal.toString())\n          \n       \n      });\n    }\n  }\n\n  return (\n    <div className='home'>\n      <h1>Home</h1>\n      <Typography variant = \"h4\"> Nhat Huyen's Internship </Typography>\n      <p>The current time is {currentTime}.</p>\n      <Container maxWidth = \"sm\" className = {classes.cardGrid}> \n        <Grid container spacing ={4}>\n          <Grid item> \n            <Card className ={classes.card} maxWidth = \"md\">\n              {/* <CardMedia \n                className ={classes.cardMedia}\n                  image =\"https://source.unsplash.com/random\"\n                  title=\"Image title\" /> */}\n\n              <CardContent className = {classes.cardContent}>\n                <Typography gutterBottom variant = \"h5\"> Account </Typography>\n                \n                {/* <Dimmer active inverted>\n                  <Loader>Loading</Loader>\n                </Dimmer> */}\n                \n              \n            \n                <Typography textAlign='left'> {userAccount} </Typography>\n                <Typography textAlign='left'> {greeting}</Typography>\n                {/* <input \n                  onChange={e => setGreetingValue(e.target.value)} \n                  placeholder=\"Set greeting\"\n                  value = {greeting}\n                /> */}\n                <TextField\n                  onChange={e => setGreetingValue(e.target.value)} \n                  placeholder=\"Set greeting\"\n                  value = {greeting}\n                  variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                />\n              </CardContent>\n              <CardActions>\n               \n                <Button size =\"small\" color=\"primary\" onClick={register} >Register</Button>\n                <Button size =\"small\" color=\"primary\" onClick={setGreeting} >Set</Button>\n                <Button size =\"small\" color=\"primary\" onClick={getBalance} >Update</Button>\n                \n              </CardActions>\n            </Card>\n          </Grid>\n          <Grid item>\n              <Card className ={classes.card} maxWidth = \"md\">\n            {/* <CardMedia \n              className ={classes.cardMedia}\n                image =\"https://source.unsplash.com/random\"\n                title=\"Image title\" /> */}\n\n            <CardContent className = {classes.cardContent}>\n              <Typography gutterBottom variant = \"h5\"> Balance </Typography>\n              {loading && (\n                    <CircularProgress size={24} className={classes.buttonProgress} />\n                )}\n              <Typography gutterBottom> {balance}</Typography>\n              <TextField onChange={e => setTo(e.target.value)} placeholder=\"Recipient Account ID\" \n                    variant='outlined'\n                    fullWidth\n                    color =\"secondary\"\n                    value = {recipient}\n                    className={classes.field}/>\n              <TextField onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                  \n                /> \n            </CardContent>\n            <CardActions>\n              <Button size =\"small\" color=\"primary\" onClick={getBalance} > Get Balance </Button>\n              <Button size =\"small\" color=\"primary\" onClick={sendCoins} >Send</Button>\n              <Button size =\"small\" color=\"primary\" onClick={sendPrivateToken} >Send Token</Button>\n    \n              \n            </CardActions>\n          </Card>\n          </Grid>\n        </Grid>\n      </Container>\n      \n    </div>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}