{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Typography, Button, AppBar, Spinner, Card, CircularProgress, Container, CardActions, Grid, CardContent, TextField } from '@material-ui/core';\nimport QRCode from \"react-qr-code\";\nimport useStyles from './Styles.js';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport xtype from 'xtypejs';\nimport text from './../contract_address.json';\nimport { useAuth } from \"../helper/AuthContext\";\nimport { useHistory } from 'react-router-dom';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'; // const contractAddress = '0x2c934A1a4F5fC1E96Cf55FDbCbFc4614580B730a' // rinkeby\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = text['contract_address'];\nvar loading = false;\n\nfunction Home(props) {\n  _s();\n\n  // const history = useHistory();\n  const {\n    currentUser,\n    currentAddress,\n    key\n  } = useAuth();\n  console.log('home ', currentAddress);\n  const classes = useStyles();\n  const [greeting, setGreetingValue] = useState('');\n  const [userAccount, setUserAccount] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [balance, setBalance] = useState();\n  const [amount, setAmount] = useState();\n  const [recipient, setTo] = useState(\"0xC5e65BF63b33B865e78A02b13f0db60713c3Ff96\");\n  const [currentTime, setCurrentTime] = useState(0);\n  const [accId, setAccId] = useState(0);\n  const [accPubkey, setAccPubkey] = useState(\"\");\n  const [pubkeyList, setPubkeyList] = useState({});\n  const [privkeyList, setPrivkeyList] = useState({});\n  const [gList, setG] = useState({});\n  const [noti, setNoti] = useState(\"\"); // useEffect(() => {\n  //   requestAccount()\n  // });\n\n  if (window.ethereum) {\n    window.ethereum.on('accountsChanged', function (accounts) {\n      setUserAccount(accounts[0]);\n    });\n  } // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n\n  async function requestAccount() {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    }); // console.log(accounts[0]);\n\n    setUserAccount(accounts[0]);\n  } // function getAccounts(callback) {\n  //   web3.eth.getAccounts((error,result) => {\n  //       if (error) {\n  //           console.log(error);\n  //       } else {\n  //           callback(result);\n  //       }\n  //   });\n  // }\n\n\n  async function matchPubkey() {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const matchingPubkey = await contract.fetchPubkey.call();\n      console.log(matchingPubkey);\n    }\n  } // const generateQrCode = async() => {\n  //   try{\n  //     const response = await QRCode.toDataURL('')\n  //   }catch(error){\n  //     console.log(error)\n  //   }\n  // }\n\n\n  async function setGreeting() {\n    if (!greeting) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.setGreeting(greeting);\n      await transaction.wait();\n      contract.on(\"TestMsg\", msg => {\n        console.log('Msg : ', msg);\n      });\n      fetchGreeting();\n    }\n  }\n\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n\n      try {\n        const data = await contract.greet();\n        setGreetingValue(data);\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  async function getBalance() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n      const signer = provider.getSigner();\n      const [account] = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const acc = signer.getAddress();\n      const b = await contract.balanceOf(account); // setAmount(balance.toString())\n\n      console.log('provider: ', provider);\n      console.log('signer: ', signer);\n      console.log('address: ', acc);\n      console.log('balance: ', b.toString());\n      setBalance(b.toString());\n      setLoading(false);\n    }\n  }\n\n  async function register() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      // await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      console.log(\"signer \", signer); // const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      // const transaction = await contract.register()\n      // var accounts = await provider.getAccounts();\n      // console.log(accounts[0])\n      // await transaction.wait()\n      // let a = '0'\n      // signer.getAddress().then((address) => {\n      //   a = address\n      // });\n      // let b = provider.getBalance(a)\n      // setAddress(a)\n      // getBalance()\n      // setLoading(false)\n      // \n    }\n  }\n\n  async function genProof() {\n    const response = await fetch(\"/genProof\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        amt: amount\n      })\n    });\n    let result;\n    await response.json().then(message => {\n      result = JSON.stringify(message[\"data\"]);\n    });\n    return result;\n  }\n\n  async function getElBalance() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      const response = await fetch(\"/getElBalance\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          'x': privkeyList[accId],\n          'y': pubkeyList[accId],\n          'g': gList[accId]\n        })\n      });\n      setLoading(false); // const provider = new ethers.providers.Web3Provider(window.ethereum)\n      // const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      // const signer =  provider.getSigner()\n      // const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      // const acc = signer.getAddress()\n      // const b = await contract.ElBalanceOf(y)\n      // console.log('address: ', acc)\n      // console.log('balance: ', b.toString())\n      // setBalance(b.toString())\n      // setLoading(false)\n    }\n  }\n\n  async function sendPrivateToken() {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer); // function sendPrivateToken(function() {\n      //   console.log('huzzah, I\\'m done!');\n      // });\n\n      let messageProof = await genProof(); // console.log(\"Check type of Proof 1 : \", messageProof);\n      // console.log(\"hello 2\");\n      // let msg2 = JSON.stringify(messageProof)\n      // msg2 =  \"hello\"\n      // const transaction = await contract.privateTransfer(msg2);\n      // console.log(\"transaction\", transaction);\n    }\n  }\n\n  async function genConfProof() {\n    setLoading(true);\n    console.log(\"g \", gList[0]);\n    const response = await fetch(\"/genConfProof\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'y_sender': pubkeyList[0],\n        'y_recipient': pubkeyList[1],\n        'g_sender': gList[0],\n        'amt': amount,\n        'b_after': 197,\n        'x_sender': privkeyList[0]\n      })\n    });\n    setLoading(false);\n    let result;\n    await response.json().then(message => {\n      result = message;\n    });\n    return result;\n  }\n\n  async function confTransfer() {\n    setNoti(\"\");\n\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer); // function sendPrivateToken(function() {\n      //   console.log('huzzah, I\\'m done!');\n      // });\n\n      let messageProof = await genConfProof();\n      console.log(messageProof);\n\n      if (messageProof['code'] != 200) {\n        const err = messageProof['err'];\n        setNoti(err);\n        return 0;\n      }\n\n      const pr1 = JSON.stringify(messageProof['rangeProofForAmt']);\n      const pr2 = JSON.stringify(messageProof['rangeProofForRemainBalance']);\n      const pr3 = JSON.stringify(messageProof['sigmaProtocol']);\n      const data = JSON.stringify(messageProof['input']); // let msg2 = JSON.stringify(messageProof)\n      // console.log(msg2)\n      // // msg2 =  \"hello\"ßßßßßßßßß\n      // const transaction = await contract.confTransfer(pr1, pr2, pr3, data);\n      // \n    }\n  }\n\n  async function sendCoins() {\n    var messageProof;\n\n    if (typeof window.ethereum !== 'undefined') {\n      fetch(\"/genProof\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          amt: amount\n        })\n      }).then(response => response.json()).then(message => {\n        messageProof = JSON.stringify(message['data']);\n        console.log(messageProof);\n        console.log(\"Check type of Proof: \", xtype(messageProof));\n      });\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.transfer(recipient, amount); // const transaction = await contract.privateTransfer(messageProof)\n      // await transaction.wait()\n\n      contract.on(\"UpdateState\", (add, newBal) => {\n        console.log(\"sender \", add);\n        console.log(\"new Balance \", newBal.toString());\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      align: \"center\",\n      variant: \"h4\",\n      children: \" Master Internship \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      align: \"center\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      className: classes.cardGrid,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxWidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Account \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex'\n                },\n                children: [/*#__PURE__*/_jsxDEV(QRCode, {\n                  value: key.pubkey,\n                  size: 110\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    style: {\n                      display: 'flex',\n                      marginLeft: '10px'\n                    },\n                    gutterBottom: true,\n                    variant: \"subtitle2\",\n                    children: [\" \", currentAddress, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 364,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                    style: {\n                      display: 'flex',\n                      marginLeft: '10px'\n                    },\n                    gutterBottom: true,\n                    variant: \"subtitle2\",\n                    children: [\" \", key.pubkey, \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 365,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAccId(e.target.value),\n                placeholder: \"ACC ID\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 16\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: register,\n                children: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getElBalance,\n                children: \"Get El Balance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxWidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                textAlign: \"left\",\n                children: [\" \", noti, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 15\n              }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24,\n                className: classes.buttonProgress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                children: [\" \", balance]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAccPubkey(e.target.value),\n                placeholder: \"My Account Public Key\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                value: accPubkey,\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setTo(e.target.value),\n                placeholder: \"Recipient Public Key\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                defaultValue: recipient,\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAmount(e.target.value),\n                placeholder: \"Amount\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field,\n                defaultValue: 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getBalance,\n                children: \" Get Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: sendCoins,\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: sendPrivateToken,\n                children: \"Send Token\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: confTransfer,\n                children: \"Conf Transfer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"BA3eBQYXi4YtDu3hO8Gokotgvhw=\", false, function () {\n  return [useAuth, useStyles];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/pages/Home.js"],"names":["React","Typography","Button","AppBar","Spinner","Card","CircularProgress","Container","CardActions","Grid","CardContent","TextField","QRCode","useStyles","useState","useEffect","ethers","xtype","text","useAuth","useHistory","XContract","contractAddress","loading","Home","props","currentUser","currentAddress","key","console","log","classes","greeting","setGreetingValue","userAccount","setUserAccount","setLoading","balance","setBalance","amount","setAmount","recipient","setTo","currentTime","setCurrentTime","accId","setAccId","accPubkey","setAccPubkey","pubkeyList","setPubkeyList","privkeyList","setPrivkeyList","gList","setG","noti","setNoti","window","ethereum","on","accounts","requestAccount","request","method","matchPubkey","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","matchingPubkey","fetchPubkey","call","setGreeting","transaction","wait","msg","fetchGreeting","data","greet","err","getBalance","account","acc","getAddress","b","balanceOf","toString","register","genProof","response","fetch","headers","body","JSON","stringify","amt","result","json","then","message","getElBalance","sendPrivateToken","messageProof","genConfProof","confTransfer","pr1","pr2","pr3","sendCoins","transfer","add","newBal","cardGrid","card","cardContent","display","pubkey","marginLeft","e","target","value","field","buttonProgress"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,UAAR,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,IAA7C,EAAoDC,gBAApD,EAAsEC,SAAtE,EAAiFC,WAAjF,EAA8FC,IAA9F,EAAoGC,WAApG,EAAiHC,SAAjH,QAAiI,mBAAjI;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAQC,SAAR,MAAwB,aAAxB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,IAAP,MAAkB,4BAAlB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,uDAAtB,C,CAEA;;;AACA,MAAMC,eAAe,GAAGJ,IAAI,CAAC,kBAAD,CAA5B;AACA,IAAIK,OAAO,GAAG,KAAd;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB;AAIA,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,cAAf;AAA+BC,IAAAA;AAA/B,MAAuCT,OAAO,EAApD;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,cAArB;AACA,QAAMI,OAAO,GAAGlB,SAAS,EAAzB;AAEA,QAAM,CAACmB,QAAD,EAAWC,gBAAX,IAA+BnB,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,OAAD,EAAUa,UAAV,IAAwBtB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACuB,OAAD,EAAUC,UAAV,IAAwBxB,QAAQ,EAAtC;AACA,QAAM,CAACyB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,EAApC;AACA,QAAM,CAAC2B,SAAD,EAAYC,KAAZ,IAAqB5B,QAAQ,CAAC,4CAAD,CAAnC;AACA,QAAM,CAAC6B,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAC+B,KAAD,EAAQC,QAAR,IAAoBhC,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACiC,SAAD,EAAYC,YAAZ,IAA4BlC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACmC,UAAD,EAAaC,aAAb,IAA8BpC,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACqC,WAAD,EAAcC,cAAd,IAAgCtC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACuC,KAAD,EAAQC,IAAR,IAAgBxC,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACyC,IAAD,EAAOC,OAAP,IAAkB1C,QAAQ,CAAC,EAAD,CAAhC,CArBmB,CAwBnB;AACA;AACA;;AACA,MAAI2C,MAAM,CAACC,QAAX,EAAoB;AAClBD,IAAAA,MAAM,CAACC,QAAP,CAAgBC,EAAhB,CAAmB,iBAAnB,EAAsC,UAASC,QAAT,EAAkB;AACtDzB,MAAAA,cAAc,CAACyB,QAAQ,CAAC,CAAD,CAAT,CAAd;AAED,KAHD;AAID,GAhCkB,CAkCnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,iBAAeC,cAAf,GAA+B;AAC7B,UAAMD,QAAQ,GAAG,MAAMH,MAAM,CAACC,QAAP,CAAgBI,OAAhB,CAAwB;AAACC,MAAAA,MAAM,EAAG;AAAV,KAAxB,CAAvB,CAD6B,CAE7B;;AACA5B,IAAAA,cAAc,CAACyB,QAAQ,CAAC,CAAD,CAAT,CAAd;AAED,GAhDkB,CAiDnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,iBAAeI,WAAf,GAA4B;AAC1B,QAAI,OAAOP,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC,YAAMG,cAAc,EAApB;AACA,YAAMI,QAAQ,GAAG,IAAIjD,MAAM,CAACkD,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMU,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAItD,MAAM,CAACuD,QAAX,CAAoBjD,eAApB,EAAqCD,SAAS,CAACmD,GAA/C,EAAoDJ,MAApD,CAAjB;AACA,YAAMK,cAAc,GAAG,MAAMH,QAAQ,CAACI,WAAT,CAAqBC,IAArB,EAA7B;AACA9C,MAAAA,OAAO,CAACC,GAAR,CAAY2C,cAAZ;AACD;AACF,GApEkB,CA0EnB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,iBAAeG,WAAf,GAA4B;AAC1B,QAAI,CAAC5C,QAAL,EAAe;;AACf,QAAI,OAAOyB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC,YAAMG,cAAc,EAApB;AACA,YAAMI,QAAQ,GAAG,IAAIjD,MAAM,CAACkD,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMU,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAItD,MAAM,CAACuD,QAAX,CAAoBjD,eAApB,EAAqCD,SAAS,CAACmD,GAA/C,EAAoDJ,MAApD,CAAjB;AACA,YAAMS,WAAW,GAAG,MAAMP,QAAQ,CAACM,WAAT,CAAqB5C,QAArB,CAA1B;AACA,YAAM6C,WAAW,CAACC,IAAZ,EAAN;AAEAR,MAAAA,QAAQ,CAACX,EAAT,CAAY,SAAZ,EAAwBoB,GAAD,IAAS;AAC9BlD,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBiD,GAAtB;AACD,OAFD;AAIAC,MAAAA,aAAa;AACd;AACF;;AACD,iBAAeA,aAAf,GAA8B;AAC5B,QAAI,OAAOvB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC,YAAMO,QAAQ,GAAG,IAAIjD,MAAM,CAACkD,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMY,QAAQ,GAAG,IAAItD,MAAM,CAACuD,QAAX,CAAoBjD,eAApB,EAAqCD,SAAS,CAACmD,GAA/C,EAAoDP,QAApD,CAAjB;;AACA,UAAG;AACD,cAAMgB,IAAI,GAAG,MAAMX,QAAQ,CAACY,KAAT,EAAnB;AACAjD,QAAAA,gBAAgB,CAACgD,IAAD,CAAhB;AACApD,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBmD,IAAtB;AACD,OAJD,CAIE,OAAME,GAAN,EAAU;AACVtD,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBqD,GAAvB;AACD;AACF;AACF;;AAED,iBAAeC,UAAf,GAA2B;AACzBhD,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI,OAAOqB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC,YAAMO,QAAQ,GAAG,IAAIjD,MAAM,CAACkD,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMY,QAAQ,GAAG,IAAItD,MAAM,CAACuD,QAAX,CAAoBjD,eAApB,EAAqCD,SAAS,CAACmD,GAA/C,EAAoDP,QAApD,CAAjB;AACA,YAAMG,MAAM,GAAIH,QAAQ,CAACI,SAAT,EAAhB;AACA,YAAM,CAACgB,OAAD,IAAY,MAAM5B,MAAM,CAACC,QAAP,CAAgBI,OAAhB,CAAwB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAxB,CAAxB;AACA,YAAMuB,GAAG,GAAGlB,MAAM,CAACmB,UAAP,EAAZ;AAEA,YAAMC,CAAC,GAAG,MAAMlB,QAAQ,CAACmB,SAAT,CAAmBJ,OAAnB,CAAhB,CAPyC,CAQzC;;AACAxD,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BmC,QAA1B;AACApC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBsC,MAAxB;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBwD,GAAzB;AACAzD,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB0D,CAAC,CAACE,QAAF,EAAzB;AACApD,MAAAA,UAAU,CAACkD,CAAC,CAACE,QAAF,EAAD,CAAV;AACAtD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AAED,iBAAeuD,QAAf,GAAyB;AACvBvD,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI,OAAOqB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC;AACA,YAAMO,QAAQ,GAAG,IAAIjD,MAAM,CAACkD,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMU,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACAxC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBsC,MAAvB,EAJyC,CAKzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD;AACF;;AAED,iBAAewB,QAAf,GAA0B;AACxB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAD,EAAc;AACxC/B,MAAAA,MAAM,EAAE,MADgC;AAExCgC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF+B;AAGxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,GAAG,EAAE5D;AADc,OAAf;AAHkC,KAAd,CAA5B;AAOA,QAAI6D,MAAJ;AACA,UAAMP,QAAQ,CAACQ,IAAT,GAAgBC,IAAhB,CAAsBC,OAAD,IAAa;AACtCH,MAAAA,MAAM,GAAGH,IAAI,CAACC,SAAL,CAAeK,OAAO,CAAC,MAAD,CAAtB,CAAT;AAGD,KAJK,CAAN;AAKA,WAAOH,MAAP;AACD;;AAED,iBAAeI,YAAf,GAA6B;AAC3BpE,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI,OAAOqB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AAEzC,YAAMmC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,EAAkB;AAC5C/B,QAAAA,MAAM,EAAE,MADoC;AAE5CgC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFmC;AAG5CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,eAAM/C,WAAW,CAACN,KAAD,CADE;AAEnB,eAAMI,UAAU,CAACJ,KAAD,CAFG;AAGnB,eAAMQ,KAAK,CAACR,KAAD;AAHQ,SAAf;AAHsC,OAAlB,CAA5B;AASAT,MAAAA,UAAU,CAAC,KAAD,CAAV,CAXyC,CAYzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF;;AAED,iBAAeqE,gBAAf,GAAkC;AAChC,QAAI,OAAOhD,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMG,cAAc,EAApB;AACA,YAAMI,QAAQ,GAAG,IAAIjD,MAAM,CAACkD,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMU,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAItD,MAAM,CAACuD,QAAX,CACfjD,eADe,EAEfD,SAAS,CAACmD,GAFK,EAGfJ,MAHe,CAAjB,CAJ0C,CAS1C;AACA;AACA;;AACA,UAAIsC,YAAY,GAAG,MAAMd,QAAQ,EAAjC,CAZ0C,CAa1C;AACA;AACA;AACA;AACA;AACA;AAGD;AACF;;AAED,iBAAee,YAAf,GAA8B;AAC5BvE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBuB,KAAK,CAAC,CAAD,CAAvB;AACE,UAAMwC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,EAAkB;AAC5C/B,MAAAA,MAAM,EAAE,MADoC;AAE5CgC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFmC;AAG5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,oBAAYjD,UAAU,CAAC,CAAD,CADH;AAEnB,uBAAeA,UAAU,CAAC,CAAD,CAFN;AAGnB,oBAAYI,KAAK,CAAC,CAAD,CAHE;AAInB,eAAMd,MAJa;AAKnB,mBAAU,GALS;AAMnB,oBAAYY,WAAW,CAAC,CAAD;AANJ,OAAf;AAHsC,KAAlB,CAA5B;AAYAf,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA,QAAIgE,MAAJ;AACA,UAAMP,QAAQ,CAACQ,IAAT,GAAgBC,IAAhB,CAAsBC,OAAD,IAAa;AACtCH,MAAAA,MAAM,GAAGG,OAAT;AACD,KAFK,CAAN;AAGA,WAAOH,MAAP;AACH;;AAED,iBAAeQ,YAAf,GAA8B;AAC5BpD,IAAAA,OAAO,CAAC,EAAD,CAAP;;AACA,QAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMG,cAAc,EAApB;AACA,YAAMI,QAAQ,GAAG,IAAIjD,MAAM,CAACkD,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMU,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAItD,MAAM,CAACuD,QAAX,CACfjD,eADe,EAEfD,SAAS,CAACmD,GAFK,EAGfJ,MAHe,CAAjB,CAJ0C,CAS1C;AACA;AACA;;AACA,UAAIsC,YAAY,GAAG,MAAMC,YAAY,EAArC;AACA9E,MAAAA,OAAO,CAACC,GAAR,CAAY4E,YAAZ;;AACA,UAAIA,YAAY,CAAC,MAAD,CAAZ,IAAwB,GAA5B,EAAgC;AAC9B,cAAMvB,GAAG,GAAGuB,YAAY,CAAC,KAAD,CAAxB;AACAlD,QAAAA,OAAO,CAAC2B,GAAD,CAAP;AACA,eAAO,CAAP;AACD;;AAED,YAAM0B,GAAG,GAAGZ,IAAI,CAACC,SAAL,CAAeQ,YAAY,CAAC,kBAAD,CAA3B,CAAZ;AACA,YAAMI,GAAG,GAAGb,IAAI,CAACC,SAAL,CAAeQ,YAAY,CAAC,4BAAD,CAA3B,CAAZ;AACA,YAAMK,GAAG,GAAGd,IAAI,CAACC,SAAL,CAAeQ,YAAY,CAAC,eAAD,CAA3B,CAAZ;AACA,YAAMzB,IAAI,GAAGgB,IAAI,CAACC,SAAL,CAAeQ,YAAY,CAAC,OAAD,CAA3B,CAAb,CAvB0C,CAwB1C;AACA;AACA;AACA;AACA;AAGD;AACF;;AAED,iBAAeM,SAAf,GAA0B;AACxB,QAAIN,YAAJ;;AACA,QAAI,OAAOjD,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AAEzCoC,MAAAA,KAAK,CAAC,WAAD,EACH;AACI/B,QAAAA,MAAM,EAAE,MADZ;AAEIgC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFb;AAGIC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,UAAAA,GAAG,EAAE5D;AADY,SAAf;AAHV,OADG,CAAL,CAOK+D,IAPL,CAOWT,QAAD,IAAcA,QAAQ,CAACQ,IAAT,EAPxB,EAQGC,IARH,CAQSC,OAAD,IAAa;AACjBG,QAAAA,YAAY,GAAGT,IAAI,CAACC,SAAL,CAAeK,OAAO,CAAC,MAAD,CAAtB,CAAf;AACA1E,QAAAA,OAAO,CAACC,GAAR,CAAY4E,YAAZ;AACA7E,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCb,KAAK,CAACyF,YAAD,CAA1C;AACD,OAZH;AAcA,YAAM7C,cAAc,EAApB;AACA,YAAMI,QAAQ,GAAG,IAAIjD,MAAM,CAACkD,SAAP,CAAiBC,YAArB,CAAkCV,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMU,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAItD,MAAM,CAACuD,QAAX,CAAoBjD,eAApB,EAAqCD,SAAS,CAACmD,GAA/C,EAAoDJ,MAApD,CAAjB;AACA,YAAMS,WAAW,GAAG,MAAMP,QAAQ,CAAC2C,QAAT,CAAkBxE,SAAlB,EAA6BF,MAA7B,CAA1B,CApByC,CAqBzC;AAEA;;AAEA+B,MAAAA,QAAQ,CAACX,EAAT,CAAY,aAAZ,EAA2B,CAACuD,GAAD,EAAMC,MAAN,KAAiB;AAExCtF,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBoF,GAAvB;AACArF,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BqF,MAAM,CAACzB,QAAP,EAA5B;AAGH,OAND;AAOD;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,KAAK,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAG,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAI,MAAA,KAAK,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAG,IAAtB;AAA2B,MAAA,SAAS,EAAI3D,OAAO,CAACqF,QAAhD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAG,CAA1B;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAGrF,OAAO,CAACsF,IAA1B;AAAgC,YAAA,QAAQ,EAAG,IAA3C;AAAA,oCAME,QAAC,WAAD;AAAa,cAAA,SAAS,EAAItF,OAAO,CAACuF,WAAlC;AAAA,sCACE,QAAC,UAAD;AAAY,gBAAA,YAAY,MAAxB;AAAyB,gBAAA,OAAO,EAAG,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAOE;AAAK,gBAAA,KAAK,EAAE;AAACC,kBAAAA,OAAO,EAAE;AAAV,iBAAZ;AAAA,wCACE,QAAC,MAAD;AAAQ,kBAAA,KAAK,EAAE3F,GAAG,CAAC4F,MAAnB;AAA2B,kBAAA,IAAI,EAAE;AAAjC;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAA,0CACE,QAAC,UAAD;AAAY,oBAAA,KAAK,EAAE;AAACD,sBAAAA,OAAO,EAAE,MAAV;AAAkBE,sBAAAA,UAAU,EAAE;AAA9B,qBAAnB;AAA0D,oBAAA,YAAY,MAAtE;AAAuE,oBAAA,OAAO,EAAG,WAAjF;AAAA,oCAA+F9F,cAA/F;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE,QAAC,UAAD;AAAY,oBAAA,KAAK,EAAE;AAAC4F,sBAAAA,OAAO,EAAE,MAAV;AAAkBE,sBAAAA,UAAU,EAAE;AAA9B,qBAAnB;AAA0D,oBAAA,YAAY,MAAtE;AAAuE,oBAAA,OAAO,EAAG,WAAjF;AAAA,oCAA+F7F,GAAG,CAAC4F,MAAnG;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,eAoBC,QAAC,SAAD;AACG,gBAAA,QAAQ,EAAEE,CAAC,IAAI5E,QAAQ,CAAC4E,CAAC,CAACC,MAAF,CAASC,KAAV,CAD1B;AAEG,gBAAA,WAAW,EAAC,QAFf;AAGG,gBAAA,OAAO,EAAC,UAHX;AAIG,gBAAA,SAAS,MAJZ;AAKG,gBAAA,KAAK,EAAE,WALV;AAMG,gBAAA,SAAS,EAAE7F,OAAO,CAAC8F;AANtB;AAAA;AAAA;AAAA;AAAA,sBApBD;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,eAmCE,QAAC,WAAD;AAAA,sCAEE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAElC,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAEa,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAnCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eA6CE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,SAAS,EAAGzE,OAAO,CAACsF,IAA1B;AAAgC,YAAA,QAAQ,EAAG,IAA3C;AAAA,oCAMF,QAAC,WAAD;AAAa,cAAA,SAAS,EAAItF,OAAO,CAACuF,WAAlC;AAAA,sCACE,QAAC,UAAD;AAAY,gBAAA,YAAY,MAAxB;AAAyB,gBAAA,OAAO,EAAG,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAC,MAAtB;AAAA,gCAA+B/D,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGGhC,OAAO,iBACF,QAAC,gBAAD;AAAkB,gBAAA,IAAI,EAAE,EAAxB;AAA4B,gBAAA,SAAS,EAAEQ,OAAO,CAAC+F;AAA/C;AAAA;AAAA;AAAA;AAAA,sBAJR,eAME,QAAC,UAAD;AAAY,gBAAA,YAAY,MAAxB;AAAA,gCAA2BzF,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,sBANF,eAOE,QAAC,SAAD;AAAW,gBAAA,QAAQ,EAAEqF,CAAC,IAAI1E,YAAY,CAAC0E,CAAC,CAACC,MAAF,CAASC,KAAV,CAAtC;AAAwD,gBAAA,WAAW,EAAC,uBAApE;AACM,gBAAA,OAAO,EAAC,UADd;AAEM,gBAAA,SAAS,MAFf;AAGM,gBAAA,KAAK,EAAE,WAHb;AAIM,gBAAA,KAAK,EAAI7E,SAJf;AAKM,gBAAA,SAAS,EAAEhB,OAAO,CAAC8F;AALzB;AAAA;AAAA;AAAA;AAAA,sBAPF,eAaE,QAAC,SAAD;AAAW,gBAAA,QAAQ,EAAEH,CAAC,IAAIhF,KAAK,CAACgF,CAAC,CAACC,MAAF,CAASC,KAAV,CAA/B;AAAiD,gBAAA,WAAW,EAAC,sBAA7D;AACM,gBAAA,OAAO,EAAC,UADd;AAEM,gBAAA,SAAS,MAFf;AAGM,gBAAA,KAAK,EAAE,WAHb;AAIM,gBAAA,YAAY,EAAInF,SAJtB;AAKM,gBAAA,SAAS,EAAEV,OAAO,CAAC8F;AALzB;AAAA;AAAA;AAAA;AAAA,sBAbF,eAmBE,QAAC,SAAD;AAAW,gBAAA,QAAQ,EAAEH,CAAC,IAAIlF,SAAS,CAACkF,CAAC,CAACC,MAAF,CAASC,KAAV,CAAnC;AAAqD,gBAAA,WAAW,EAAC,QAAjE;AAA0E,gBAAA,OAAO,EAAC,UAAlF;AACI,gBAAA,SAAS,MADb;AAEI,gBAAA,KAAK,EAAE,WAFX;AAGI,gBAAA,SAAS,EAAE7F,OAAO,CAAC8F,KAHvB;AAII,gBAAA,YAAY,EAAI;AAJpB;AAAA;AAAA;AAAA;AAAA,sBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,oBANE,eAgCF,QAAC,WAAD;AAAA,sCACE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAEzC,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAE4B,SAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAEP,gBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAEG,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhCE;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA7CF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkGD;;GAraQpF,I;UAKsCL,O,EAE7BN,S;;;KAPTW,I;AAuaT,eAAeA,IAAf","sourcesContent":["import React from 'react';\n\nimport {Typography, Button, AppBar, Spinner, Card,  CircularProgress, Container, CardActions, Grid, CardContent, TextField} from '@material-ui/core'\nimport QRCode from \"react-qr-code\";\nimport  useStyles  from './Styles.js';\nimport {useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport xtype from 'xtypejs'\nimport text  from './../contract_address.json';\nimport { useAuth } from \"../helper/AuthContext\"\nimport { useHistory } from 'react-router-dom';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'\n\n// const contractAddress = '0x2c934A1a4F5fC1E96Cf55FDbCbFc4614580B730a' // rinkeby\nconst contractAddress = text['contract_address']\nvar loading = false;\n\nfunction Home(props) {\n  // const history = useHistory();\n\n  \n\n  const { currentUser, currentAddress, key } = useAuth()\n  console.log('home ', currentAddress)\n  const classes = useStyles()\n\n  const [greeting, setGreetingValue] = useState('')\n  const [userAccount, setUserAccount] = useState('')\n  const [loading, setLoading] = useState(false);\n  const [balance, setBalance] = useState()\n  const [amount, setAmount] = useState()\n  const [recipient, setTo] = useState(\"0xC5e65BF63b33B865e78A02b13f0db60713c3Ff96\")\n  const [currentTime, setCurrentTime] = useState(0);\n  const [accId, setAccId] = useState(0);\n  const [accPubkey, setAccPubkey] = useState(\"\");\n  const [pubkeyList, setPubkeyList] = useState({});\n  const [privkeyList, setPrivkeyList] = useState({});\n  const [gList, setG] = useState({});\n  const [noti, setNoti] = useState(\"\")\n\n\n  // useEffect(() => {\n  //   requestAccount()\n  // });\n  if (window.ethereum){\n    window.ethereum.on('accountsChanged', function(accounts){\n      setUserAccount(accounts[0])\n\n    })\n  }\n\n  // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n  async function requestAccount(){\n    const accounts = await window.ethereum.request({method : 'eth_requestAccounts'})\n    // console.log(accounts[0]);\n    setUserAccount(accounts[0])\n\n  }\n  // function getAccounts(callback) {\n  //   web3.eth.getAccounts((error,result) => {\n  //       if (error) {\n  //           console.log(error);\n  //       } else {\n  //           callback(result);\n  //       }\n  //   });\n  // }\n  \n  async function matchPubkey(){\n    if (typeof window.ethereum !== 'undefined'){\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const matchingPubkey = await contract.fetchPubkey.call();\n      console.log(matchingPubkey)\n    }\n  }\n\n\n\n\n\n  // const generateQrCode = async() => {\n  //   try{\n  //     const response = await QRCode.toDataURL('')\n  //   }catch(error){\n  //     console.log(error)\n  //   }\n  // }\n  \n  async function setGreeting(){\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined'){\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n\n      contract.on(\"TestMsg\", (msg) => {\n        console.log('Msg : ', msg);\n      });\n\n      fetchGreeting()\n    }\n  }\n  async function fetchGreeting(){\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      try{\n        const data = await contract.greet()\n        setGreetingValue(data)\n        console.log('data: ', data)\n      } catch(err){\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n\n  async function getBalance(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      const signer =  provider.getSigner()\n      const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      const acc = signer.getAddress()\n\n      const b = await contract.balanceOf(account)\n      // setAmount(balance.toString())\n      console.log('provider: ', provider)\n      console.log('signer: ', signer)\n      console.log('address: ', acc)\n      console.log('balance: ', b.toString())\n      setBalance(b.toString())\n      setLoading(false)\n    }\n  }\n\n  async function register(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      // await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      console.log(\"signer \", signer)\n      // const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      // const transaction = await contract.register()\n      // var accounts = await provider.getAccounts();\n      // console.log(accounts[0])\n      // await transaction.wait()\n      // let a = '0'\n      // signer.getAddress().then((address) => {\n      //   a = address\n      // });\n      // let b = provider.getBalance(a)\n      // setAddress(a)\n      \n      // getBalance()\n      // setLoading(false)\n      // \n    }\n  }\n\n  async function genProof() {\n    const response = await fetch(\"/genProof\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        amt: amount,\n      }),\n    })\n    let result\n    await response.json().then((message) => {\n      result = JSON.stringify(message[\"data\"]);\n     \n\n    });\n    return result\n  }\n\n  async function getElBalance(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n\n      const response = await fetch(\"/getElBalance\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          'x' : privkeyList[accId],\n          'y' : pubkeyList[accId],\n          'g' : gList[accId],\n        }),\n      })\n      setLoading(false)\n      // const provider = new ethers.providers.Web3Provider(window.ethereum)\n      // const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      // const signer =  provider.getSigner()\n      // const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      // const acc = signer.getAddress()\n      // const b = await contract.ElBalanceOf(y)\n      // console.log('address: ', acc)\n      // console.log('balance: ', b.toString())\n      // setBalance(b.toString())\n      // setLoading(false)\n    }\n  }\n\n  async function sendPrivateToken() {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        contractAddress,\n        XContract.abi,\n        signer\n      );\n      // function sendPrivateToken(function() {\n      //   console.log('huzzah, I\\'m done!');\n      // });\n      let messageProof = await genProof();\n      // console.log(\"Check type of Proof 1 : \", messageProof);\n      // console.log(\"hello 2\");\n      // let msg2 = JSON.stringify(messageProof)\n      // msg2 =  \"hello\"\n      // const transaction = await contract.privateTransfer(msg2);\n      // console.log(\"transaction\", transaction);\n\n      \n    }\n  }\n\n  async function genConfProof() {\n    setLoading(true)\n    console.log(\"g \", gList[0])\n      const response = await fetch(\"/genConfProof\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          'y_sender': pubkeyList[0],\n          'y_recipient': pubkeyList[1],\n          'g_sender': gList[0],\n          'amt':amount,\n          'b_after':197,\n          'x_sender': privkeyList[0]\n        }),\n      })\n      setLoading(false)\n      let result\n      await response.json().then((message) => {\n        result = message\n      });\n      return result\n  }\n\n  async function confTransfer() {\n    setNoti(\"\")\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        contractAddress,\n        XContract.abi,\n        signer\n      );\n      // function sendPrivateToken(function() {\n      //   console.log('huzzah, I\\'m done!');\n      // });\n      let messageProof = await genConfProof();\n      console.log(messageProof);\n      if (messageProof['code'] != 200){\n        const err = messageProof['err']\n        setNoti(err);\n        return 0\n      }\n  \n      const pr1 = JSON.stringify(messageProof['rangeProofForAmt'])\n      const pr2 = JSON.stringify(messageProof['rangeProofForRemainBalance'])\n      const pr3 = JSON.stringify(messageProof['sigmaProtocol'])\n      const data = JSON.stringify(messageProof['input'])\n      // let msg2 = JSON.stringify(messageProof)\n      // console.log(msg2)\n      // // msg2 =  \"hello\"ßßßßßßßßß\n      // const transaction = await contract.confTransfer(pr1, pr2, pr3, data);\n      // \n\n      \n    }\n  }\n  \n  async function sendCoins(){\n    var messageProof\n    if (typeof window.ethereum !== 'undefined'){\n\n      fetch(\"/genProof\",\n        {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                amt: amount\n            }),\n        }).then((response) => response.json())\n        .then((message) => {\n          messageProof = JSON.stringify(message['data'])\n          console.log(messageProof)\n          console.log(\"Check type of Proof: \", xtype(messageProof))\n        });\n     \n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.transfer(recipient, amount)\n      // const transaction = await contract.privateTransfer(messageProof)\n      \n      // await transaction.wait()\n      \n      contract.on(\"UpdateState\", (add, newBal) => {\n   \n          console.log(\"sender \", add)\n          console.log(\"new Balance \", newBal.toString())\n          \n       \n      });\n    }\n  }\n\n  return (\n    <div className='home'>\n      <Typography align='center' variant = \"h4\"> Master Internship </Typography>\n      <h1 align='center'>Home</h1>\n      <Container maxWidth = \"sm\" className = {classes.cardGrid}> \n        <Grid container spacing ={4}>\n          <Grid item> \n            <Card className ={classes.card} maxWidth = \"md\">\n              {/* <CardMedia \n                className ={classes.cardMedia}\n                  image =\"https://source.unsplash.com/random\"\n                  title=\"Image title\" /> */}\n\n              <CardContent className = {classes.cardContent}>\n                <Typography gutterBottom variant = \"h5\"> Account </Typography>\n                \n                {/* <Dimmer active inverted>\n                  <Loader>Loading</Loader>\n                </Dimmer> */}\n                \n                <div style={{display: 'flex'}}>\n                  <QRCode value={key.pubkey} size={110}/>\n                  <div>\n                    <Typography style={{display: 'flex', marginLeft: '10px'}} gutterBottom variant = \"subtitle2\"> {currentAddress} </Typography>\n                    <Typography style={{display: 'flex', marginLeft: '10px'}} gutterBottom variant = \"subtitle2\"> {key.pubkey} </Typography> \n                  </div>\n\n                </div>\n                {/* <input \n                  onChange={e => setGreetingValue(e.target.value)} \n                  placeholder=\"Set greeting\"\n                  value = {greeting}\n                /> */}\n               <TextField\n                  onChange={e => setAccId(e.target.value)} \n                  placeholder=\"ACC ID\"\n                  variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                /> \n              </CardContent>\n              <CardActions>\n               \n                <Button size =\"small\" color=\"primary\" onClick={register} >Register</Button>\n                <Button size =\"small\" color=\"primary\" onClick={getElBalance} >Get El Balance</Button>\n                \n              </CardActions>\n            </Card>\n          </Grid>\n          <Grid item>\n              <Card className ={classes.card} maxWidth = \"md\">\n            {/* <CardMedia \n              className ={classes.cardMedia}\n                image =\"https://source.unsplash.com/random\"\n                title=\"Image title\" /> */}\n\n            <CardContent className = {classes.cardContent}>\n              <Typography gutterBottom variant = \"h5\"> Balance </Typography>\n              <Typography textAlign='left'> {noti} </Typography>\n              {loading && (\n                    <CircularProgress size={24} className={classes.buttonProgress} />\n                )}\n              <Typography gutterBottom> {balance}</Typography>\n              <TextField onChange={e => setAccPubkey(e.target.value)} placeholder=\"My Account Public Key\" \n                    variant='outlined'\n                    fullWidth\n                    color =\"secondary\"\n                    value = {accPubkey}\n                    className={classes.field}/>\n              <TextField onChange={e => setTo(e.target.value)} placeholder=\"Recipient Public Key\" \n                    variant='outlined'\n                    fullWidth\n                    color =\"secondary\"\n                    defaultValue = {recipient}\n                    className={classes.field}/>\n              <TextField onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                  defaultValue = {1}\n                /> \n            </CardContent>\n            <CardActions>\n              <Button size =\"small\" color=\"primary\" onClick={getBalance} > Get Balance </Button>\n              <Button size =\"small\" color=\"primary\" onClick={sendCoins} >Send</Button>\n              <Button size =\"small\" color=\"primary\" onClick={sendPrivateToken} >Send Token</Button>\n              <Button size =\"small\" color=\"primary\" onClick={confTransfer} >Conf Transfer</Button>\n              \n            </CardActions>\n          </Card>\n          </Grid>\n        </Grid>\n      </Container>\n \n      \n    </div>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}