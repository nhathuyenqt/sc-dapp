{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/sc-dapp/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Typography, Button, AppBar, Spinner, Card, CircularProgress, Container, CardActions, Grid, CardContent, CardMedia, TextField } from '@material-ui/core';\nimport useStyles from './Styles.js';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'; // const contractAddress = '0x3a709513c233b2EFeCF984847Daa676291f8Bc1E'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\nvar loading = false;\n\nfunction Home() {\n  _s();\n\n  const classes = useStyles();\n  const [greeting, setGreetingValue] = useState('');\n  const [userAccount, setUserAccount] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState();\n  const [address, setAddress] = useState();\n  const [currentTime, setCurrentTime] = useState(0);\n  useEffect(() => {\n    fetch('/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n  }, []); // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  }\n\n  async function setGreeting() {\n    if (!greeting) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.setGreeting(greeting);\n      await transaction.wait();\n      contract.on(\"TestMsg\", msg => {\n        console.log('Msg : ', msg);\n      });\n      fetchGreeting();\n    }\n  }\n\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n\n      try {\n        const data = await contract.greet();\n        setGreetingValue(data);\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  async function getBalance() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n      const signer = provider.getSigner();\n      const [account] = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const acc = signer.getAddress();\n      const balance = await contract.balanceOf(account);\n      setAmount(balance.toString());\n      console.log('provider: ', provider);\n      console.log('signer: ', signer);\n      console.log('address: ', acc);\n      console.log('balance: ', balance.toString());\n      setLoading(false);\n    }\n  }\n\n  async function register() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.register();\n      await transaction.wait();\n      let a = signer.getAddress().then(address => {\n        console.log(address);\n      });\n      let b = provider.getBalance(a); // setAddress(a)\n\n      getBalance(); // setLoading(false)\n      // \n    }\n  }\n\n  async function sendCoins() {\n    if (typeof window.ethereum !== 'undefined') {\n      fetch(\"/genProof\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          loginData: credentials\n        })\n      });\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.transfer(userAccount, amount);\n      await transaction.wait();\n      contract.events.UpdateState({}, (error, msg) => {\n        if (!error) {\n          console.log(msg);\n        } else {\n          console.log(error);\n        }\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: \" Nhat Huyen's Internship \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The current time is \", currentTime, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      className: classes.cardGrid,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxWidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Account \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                textAlign: \"left\",\n                children: [\" \", address, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                textAlign: \"left\",\n                children: [\" \", greeting]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setGreetingValue(e.target.value),\n                placeholder: \"Set greeting\",\n                value: greeting,\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: register,\n                children: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: setGreeting,\n                children: \"Set\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getBalance,\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxWidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 15\n              }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24,\n                className: classes.buttonProgress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                children: [\" \", amount]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setUserAccount(e.target.value),\n                placeholder: \"Account ID\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAmount(e.target.value),\n                placeholder: \"Amount\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getBalance,\n                children: \" Get Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: sendCoins,\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"DIyw+I0bSsO/W+1CiZvkb0N3Iuk=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/sc-dapp/src/pages/Home.js"],"names":["React","Typography","Button","AppBar","Spinner","Card","CircularProgress","Container","CardActions","Grid","CardContent","CardMedia","TextField","useStyles","useState","useEffect","ethers","Dimmer","Loader","Image","Segment","XContract","contractAddress","loading","Home","classes","greeting","setGreetingValue","userAccount","setUserAccount","setLoading","amount","setAmount","address","setAddress","currentTime","setCurrentTime","fetch","then","res","json","data","time","requestAccount","window","ethereum","request","method","setGreeting","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","wait","on","msg","console","log","fetchGreeting","greet","err","getBalance","account","acc","getAddress","balance","balanceOf","toString","register","a","b","sendCoins","headers","body","JSON","stringify","loginData","credentials","transfer","events","UpdateState","error","cardGrid","card","cardContent","e","target","value","field","buttonProgress"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,UAAR,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,IAA7C,EAAoDC,gBAApD,EAAsEC,SAAtE,EAAiFC,WAAjF,EAA8FC,IAA9F,EAAoGC,WAApG,EAAiHC,SAAjH,EAA4HC,SAA5H,QAA4I,mBAA5I;AAEA,OAAQC,SAAR,MAAwB,aAAxB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,OAAhC,QAAgD,mBAAhD;AAEA,OAAOC,SAAP,MAAsB,uDAAtB,C,CAGA;;;AACA,MAAMC,eAAe,GAAG,4CAAxB;AACA,IAAIC,OAAO,GAAG,KAAd;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AAEA,QAAM,CAACa,QAAD,EAAWC,gBAAX,IAA+Bb,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,OAAD,EAAUO,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,EAApC;AACA,QAAM,CAACmB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,EAAtC;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,KAAK,CAAC,OAAD,CAAL,CAAeC,IAAf,CAAoBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAA3B,EAAuCF,IAAvC,CAA4CG,IAAI,IAAI;AAClDL,MAAAA,cAAc,CAACK,IAAI,CAACC,IAAN,CAAd;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT,CAVc,CAiBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAeC,cAAf,GAA+B;AAC7B,UAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAACC,MAAAA,MAAM,EAAG;AAAV,KAAxB,CAAN;AAED;;AAID,iBAAeC,WAAf,GAA4B;AAC1B,QAAI,CAACtB,QAAL,EAAe;;AACf,QAAI,OAAOkB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC,YAAMF,cAAc,EAApB;AACA,YAAMM,QAAQ,GAAG,IAAIjC,MAAM,CAACkC,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMO,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAItC,MAAM,CAACuC,QAAX,CAAoBjC,eAApB,EAAqCD,SAAS,CAACmC,GAA/C,EAAoDJ,MAApD,CAAjB;AACA,YAAMK,WAAW,GAAG,MAAMH,QAAQ,CAACN,WAAT,CAAqBtB,QAArB,CAA1B;AACA,YAAM+B,WAAW,CAACC,IAAZ,EAAN;AAEAJ,MAAAA,QAAQ,CAACK,EAAT,CAAY,SAAZ,EAAwBC,GAAD,IAAS;AAC9BC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,GAAtB;AACD,OAFD;AAIAG,MAAAA,aAAa;AACd;AACF;;AACD,iBAAeA,aAAf,GAA8B;AAC5B,QAAI,OAAOnB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC,YAAMI,QAAQ,GAAG,IAAIjC,MAAM,CAACkC,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMS,QAAQ,GAAG,IAAItC,MAAM,CAACuC,QAAX,CAAoBjC,eAApB,EAAqCD,SAAS,CAACmC,GAA/C,EAAoDP,QAApD,CAAjB;;AACA,UAAG;AACD,cAAMR,IAAI,GAAG,MAAMa,QAAQ,CAACU,KAAT,EAAnB;AACArC,QAAAA,gBAAgB,CAACc,IAAD,CAAhB;AACAoB,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBrB,IAAtB;AACD,OAJD,CAIE,OAAMwB,GAAN,EAAU;AACVJ,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBG,GAAvB;AACD;AACF;AACF;;AAED,iBAAeC,UAAf,GAA2B;AACzBpC,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI,OAAOc,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC,YAAMI,QAAQ,GAAG,IAAIjC,MAAM,CAACkC,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMS,QAAQ,GAAG,IAAItC,MAAM,CAACuC,QAAX,CAAoBjC,eAApB,EAAqCD,SAAS,CAACmC,GAA/C,EAAoDP,QAApD,CAAjB;AACA,YAAMG,MAAM,GAAIH,QAAQ,CAACI,SAAT,EAAhB;AACA,YAAM,CAACc,OAAD,IAAY,MAAMvB,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAxB,CAAxB;AACA,YAAMqB,GAAG,GAAGhB,MAAM,CAACiB,UAAP,EAAZ;AACA,YAAMC,OAAO,GAAG,MAAMhB,QAAQ,CAACiB,SAAT,CAAmBJ,OAAnB,CAAtB;AACAnC,MAAAA,SAAS,CAACsC,OAAO,CAACE,QAAR,EAAD,CAAT;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Bb,QAA1B;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBV,MAAxB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBM,GAAzB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBQ,OAAO,CAACE,QAAR,EAAzB;AACA1C,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AAED,iBAAe2C,QAAf,GAAyB;AACvB3C,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI,OAAOc,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AACzC,YAAMF,cAAc,EAApB;AACA,YAAMM,QAAQ,GAAG,IAAIjC,MAAM,CAACkC,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMO,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAItC,MAAM,CAACuC,QAAX,CAAoBjC,eAApB,EAAqCD,SAAS,CAACmC,GAA/C,EAAoDJ,MAApD,CAAjB;AACA,YAAMK,WAAW,GAAG,MAAMH,QAAQ,CAACmB,QAAT,EAA1B;AACA,YAAMhB,WAAW,CAACC,IAAZ,EAAN;AACA,UAAIgB,CAAC,GAAGtB,MAAM,CAACiB,UAAP,GAAoB/B,IAApB,CAA0BL,OAAD,IAAa;AAC5C4B,QAAAA,OAAO,CAACC,GAAR,CAAY7B,OAAZ;AACD,OAFO,CAAR;AAGA,UAAI0C,CAAC,GAAG1B,QAAQ,CAACiB,UAAT,CAAoBQ,CAApB,CAAR,CAVyC,CAWzC;;AAEAR,MAAAA,UAAU,GAb+B,CAczC;AACA;AACD;AACF;;AAED,iBAAeU,SAAf,GAA0B;AAExB,QAAI,OAAOhC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA2C;AAEzCR,MAAAA,KAAK,CAAC,WAAD,EACH;AACIU,QAAAA,MAAM,EAAE,KADZ;AAEI8B,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFb;AAGIC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,UAAAA,SAAS,EAAEC;AADM,SAAf;AAHV,OADG,CAAL;AASA,YAAMvC,cAAc,EAApB;AACA,YAAMM,QAAQ,GAAG,IAAIjC,MAAM,CAACkC,SAAP,CAAiBC,YAArB,CAAkCP,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMO,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,YAAMC,QAAQ,GAAG,IAAItC,MAAM,CAACuC,QAAX,CAAoBjC,eAApB,EAAqCD,SAAS,CAACmC,GAA/C,EAAoDJ,MAApD,CAAjB;AACA,YAAMK,WAAW,GAAG,MAAMH,QAAQ,CAAC6B,QAAT,CAAkBvD,WAAlB,EAA+BG,MAA/B,CAA1B;AACA,YAAM0B,WAAW,CAACC,IAAZ,EAAN;AAEAJ,MAAAA,QAAQ,CAAC8B,MAAT,CAAgBC,WAAhB,CAA4B,EAA5B,EAAgC,CAACC,KAAD,EAAQ1B,GAAR,KAAe;AAC7C,YAAG,CAAC0B,KAAJ,EAAW;AACTzB,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAED,SAHD,MAGO;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAYwB,KAAZ;AACD;AACF,OAPD;AAQD;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAG,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,yCAAwBnD,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAG,IAAtB;AAA2B,MAAA,SAAS,EAAIV,OAAO,CAAC8D,QAAhD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAG,CAA1B;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,SAAS,EAAG9D,OAAO,CAAC+D,IAA1B;AAAgC,YAAA,QAAQ,EAAG,IAA3C;AAAA,oCAME,QAAC,WAAD;AAAa,cAAA,SAAS,EAAI/D,OAAO,CAACgE,WAAlC;AAAA,sCACE,QAAC,UAAD;AAAY,gBAAA,YAAY,MAAxB;AAAyB,gBAAA,OAAO,EAAG,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eASE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAC,MAAtB;AAAA,gCAA+BxD,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,sBATF,eAUE,QAAC,UAAD;AAAY,gBAAA,SAAS,EAAC,MAAtB;AAAA,gCAA+BP,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF,eAgBE,QAAC,SAAD;AACE,gBAAA,QAAQ,EAAEgE,CAAC,IAAI/D,gBAAgB,CAAC+D,CAAC,CAACC,MAAF,CAASC,KAAV,CADjC;AAEE,gBAAA,WAAW,EAAC,cAFd;AAGE,gBAAA,KAAK,EAAIlE,QAHX;AAIE,gBAAA,OAAO,EAAC,UAJV;AAKE,gBAAA,SAAS,MALX;AAME,gBAAA,KAAK,EAAE,WANT;AAOE,gBAAA,SAAS,EAAED,OAAO,CAACoE;AAPrB;AAAA;AAAA;AAAA;AAAA,sBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,eAgCE,QAAC,WAAD;AAAA,sCAEE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAEpB,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAEzB,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAEkB,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eA2CE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,iCACI,QAAC,IAAD;AAAM,YAAA,SAAS,EAAGzC,OAAO,CAAC+D,IAA1B;AAAgC,YAAA,QAAQ,EAAG,IAA3C;AAAA,oCAMF,QAAC,WAAD;AAAa,cAAA,SAAS,EAAI/D,OAAO,CAACgE,WAAlC;AAAA,sCACE,QAAC,UAAD;AAAY,gBAAA,YAAY,MAAxB;AAAyB,gBAAA,OAAO,EAAG,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEGlE,OAAO,iBACF,QAAC,gBAAD;AAAkB,gBAAA,IAAI,EAAE,EAAxB;AAA4B,gBAAA,SAAS,EAAEE,OAAO,CAACqE;AAA/C;AAAA;AAAA;AAAA;AAAA,sBAHR,eAKE,QAAC,UAAD;AAAY,gBAAA,YAAY,MAAxB;AAAA,gCAA2B/D,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,eAME,QAAC,SAAD;AAAW,gBAAA,QAAQ,EAAE2D,CAAC,IAAI7D,cAAc,CAAC6D,CAAC,CAACC,MAAF,CAASC,KAAV,CAAxC;AAA0D,gBAAA,WAAW,EAAC,YAAtE;AACM,gBAAA,OAAO,EAAC,UADd;AAEM,gBAAA,SAAS,MAFf;AAGM,gBAAA,KAAK,EAAE,WAHb;AAIM,gBAAA,SAAS,EAAEnE,OAAO,CAACoE;AAJzB;AAAA;AAAA;AAAA;AAAA,sBANF,eAWE,QAAC,SAAD;AAAW,gBAAA,QAAQ,EAAEH,CAAC,IAAI1D,SAAS,CAAC0D,CAAC,CAACC,MAAF,CAASC,KAAV,CAAnC;AAAqD,gBAAA,WAAW,EAAC,QAAjE;AAA0E,gBAAA,OAAO,EAAC,UAAlF;AACI,gBAAA,SAAS,MADb;AAEI,gBAAA,KAAK,EAAE,WAFX;AAGI,gBAAA,SAAS,EAAEnE,OAAO,CAACoE;AAHvB;AAAA;AAAA;AAAA;AAAA,sBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,oBANE,eAuBF,QAAC,WAAD;AAAA,sCACE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAE3B,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAE,OAAd;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAsC,gBAAA,OAAO,EAAEU,SAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAvBE;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA3CF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsFD;;GA5NQpD,I;UACSX,S;;;KADTW,I;AA8NT,eAAeA,IAAf","sourcesContent":["import React from 'react';\n\nimport {Typography, Button, AppBar, Spinner, Card,  CircularProgress, Container, CardActions, Grid, CardContent, CardMedia, TextField} from '@material-ui/core'\n\nimport  useStyles  from './Styles.js';\nimport {useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport { Dimmer, Loader, Image, Segment, } from 'semantic-ui-react'\n\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'\n\n\n// const contractAddress = '0x3a709513c233b2EFeCF984847Daa676291f8Bc1E'\nconst contractAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3'\nvar loading = false;\n\nfunction Home() {\n  const classes = useStyles()\n\n  const [greeting, setGreetingValue] = useState('')\n  const [userAccount, setUserAccount] = useState('')\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState()\n  const [address, setAddress] = useState()\n  const [currentTime, setCurrentTime] = useState(0);\n\n  useEffect(() => {\n    fetch('/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n  }, []);\n\n  \n  // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n  async function requestAccount(){\n    await window.ethereum.request({method : 'eth_requestAccounts'})\n    \n  }\n\n \n\n  async function setGreeting(){\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined'){\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n\n      contract.on(\"TestMsg\", (msg) => {\n        console.log('Msg : ', msg);\n      });\n\n      fetchGreeting()\n    }\n  }\n  async function fetchGreeting(){\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      try{\n        const data = await contract.greet()\n        setGreetingValue(data)\n        console.log('data: ', data)\n      } catch(err){\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n\n  async function getBalance(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      const signer =  provider.getSigner()\n      const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      const acc = signer.getAddress()\n      const balance = await contract.balanceOf(account)\n      setAmount(balance.toString())\n      console.log('provider: ', provider)\n      console.log('signer: ', signer)\n      console.log('address: ', acc)\n      console.log('balance: ', balance.toString())\n      setLoading(false)\n    }\n  }\n\n  async function register(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.register()\n      await transaction.wait()\n      let a = signer.getAddress().then((address) => {\n        console.log(address);\n      });\n      let b = provider.getBalance(a)\n      // setAddress(a)\n      \n      getBalance()\n      // setLoading(false)\n      // \n    }\n  }\n\n  async function sendCoins(){\n    \n    if (typeof window.ethereum !== 'undefined'){\n\n      fetch(\"/genProof\",\n        {\n            method: \"GET\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                loginData: credentials,\n            }),\n        })\n\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.transfer(userAccount, amount)\n      await transaction.wait()\n      \n      contract.events.UpdateState({}, (error, msg)=> {\n        if(!error) {\n          console.log(msg);\n          \n        } else {\n          console.log(error);\n        }\n      });\n    }\n  }\n\n  return (\n    <div className='home'>\n      <h1>Home</h1>\n      <Typography variant = \"h4\"> Nhat Huyen's Internship </Typography>\n      <p>The current time is {currentTime}.</p>\n      <Container maxWidth = \"sm\" className = {classes.cardGrid}> \n        <Grid container spacing ={4}>\n          <Grid item> \n            <Card className ={classes.card} maxWidth = \"md\">\n              {/* <CardMedia \n                className ={classes.cardMedia}\n                  image =\"https://source.unsplash.com/random\"\n                  title=\"Image title\" /> */}\n\n              <CardContent className = {classes.cardContent}>\n                <Typography gutterBottom variant = \"h5\"> Account </Typography>\n                \n                {/* <Dimmer active inverted>\n                  <Loader>Loading</Loader>\n                </Dimmer> */}\n                \n              \n            \n                <Typography textAlign='left'> {address} </Typography>\n                <Typography textAlign='left'> {greeting}</Typography>\n                {/* <input \n                  onChange={e => setGreetingValue(e.target.value)} \n                  placeholder=\"Set greeting\"\n                  value = {greeting}\n                /> */}\n                <TextField\n                  onChange={e => setGreetingValue(e.target.value)} \n                  placeholder=\"Set greeting\"\n                  value = {greeting}\n                  variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                />\n              </CardContent>\n              <CardActions>\n               \n                <Button size =\"small\" color=\"primary\" onClick={register} >Register</Button>\n                <Button size =\"small\" color=\"primary\" onClick={setGreeting} >Set</Button>\n                <Button size =\"small\" color=\"primary\" onClick={getBalance} >Update</Button>\n                \n              </CardActions>\n            </Card>\n          </Grid>\n          <Grid item>\n              <Card className ={classes.card} maxWidth = \"md\">\n            {/* <CardMedia \n              className ={classes.cardMedia}\n                image =\"https://source.unsplash.com/random\"\n                title=\"Image title\" /> */}\n\n            <CardContent className = {classes.cardContent}>\n              <Typography gutterBottom variant = \"h5\"> Balance </Typography>\n              {loading && (\n                    <CircularProgress size={24} className={classes.buttonProgress} />\n                )}\n              <Typography gutterBottom> {amount}</Typography>\n              <TextField onChange={e => setUserAccount(e.target.value)} placeholder=\"Account ID\" \n                    variant='outlined'\n                    fullWidth\n                    color =\"secondary\"\n                    className={classes.field}/>\n              <TextField onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                /> \n            </CardContent>\n            <CardActions>\n              <Button size =\"small\" color=\"primary\" onClick={getBalance} > Get Balance </Button>\n              <Button size =\"small\" color=\"primary\" onClick={sendCoins} >Send</Button>\n    \n              \n            </CardActions>\n          </Card>\n          </Grid>\n        </Grid>\n      </Container>\n      \n    </div>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}