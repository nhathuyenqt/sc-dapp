{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/pages/Posts.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport xtype from 'xtypejs';\nimport AddPost from '../components/AddPost';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from '@material-ui/core/Dialog';\nimport { Typography, Button, TextField, Grid } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport { DataGrid } from '@material-ui/data-grid';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json';\nimport text from './../contract_address.json';\nimport { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { green } from '@material-ui/core/colors';\nimport SendIcon from '@material-ui/icons/Send';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport DealDialog from './components/Deal';\nimport NewPostDialog from './components/NewPost';\nimport PropTypes from 'prop-types';\nimport { useAuth } from \"../helper/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = text['contract_address'];\n\nfunction Posts(props) {\n  _s();\n\n  const {\n    currentBCAccount,\n    keypair,\n    loading,\n    balance\n  } = useAuth();\n  const [postList, setPostList] = useState([]);\n  const [yourPostList, setYourPostList] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openOffer, setOpenOffer] = useState(false);\n  const [openNewPost, setOpenNewPost] = useState(false);\n  const [selectedItem, setSelectedItem] = useState({\n    id: '',\n    description: '',\n    pubkey: '',\n    state: ''\n  });\n  const [deal, setDeal] = useState();\n  const [minOffer, setMinOffer] = useState();\n  const classes = useStyles();\n  const State = ['Processing', 'Assigned', 'WaitingPaid', 'Closed', 'Cancel'];\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 68,\n    headerClassName: 'super-app-theme--header'\n  }, {\n    field: 'description',\n    headerName: 'Description',\n    headerClassName: 'super-app-theme--header',\n    flex: 1\n  }, // {\n  //     field: 'id',\n  //     headerName: 'id',\n  //     type: 'number',\n  //     width: 50,\n  //     editable: true,\n  //   }\n  {\n    field: 'action',\n    headerName: 'Action',\n    headerClassName: 'super-app-theme--header',\n    width: 150,\n    renderCell: params => /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: () => handleClickOpen(params),\n        children: \"Offer a price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this),\n    disableClickEventBubbling: true\n  }];\n  const columns2 = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 68,\n    headerClassName: 'super-app-theme--Filled',\n    sortDescendingFirst: true\n  }, {\n    field: 'description',\n    headerName: 'Description',\n    headerClassName: 'super-app-theme--Filled',\n    flex: 1\n  }, {\n    field: 'state',\n    headerName: 'State',\n    headerClassName: 'super-app-theme--Filled',\n    flex: 1\n  }, {\n    field: 'minprice',\n    headerName: 'Min Price',\n    headerClassName: 'super-app-theme--Filled',\n    width: 150,\n    renderCell: params => /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        style: {\n          color: green[500]\n        },\n        size: \"small\",\n        onClick: () => loadMinOffer(params.row),\n        children: /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }, this),\n    disableClickEventBubbling: true\n  }, {\n    field: 'action',\n    headerName: 'Action',\n    headerClassName: 'super-app-theme--Filled',\n    width: 150,\n    renderCell: params => /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"small\",\n        alignItem: \"center\",\n        onClick: () => handleClickOpen(params),\n        children: \"Ok\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }, this),\n    disableClickEventBubbling: true\n  }];\n  setTimeout(() => {\n    listenEvents();\n  }, 5000);\n\n  const handleClickLoad = params => {\n    setSelectedItem(params.row);\n  };\n\n  const handleCloseOffer = value => {\n    setOpenOffer(false);\n    setSelectedItem(value);\n  };\n\n  const handleClickOpen = params => {\n    console.log(params.row);\n    setSelectedItem(params.row);\n    setOpen(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false);\n    setSelectedItem(value);\n    reload();\n  };\n\n  const handlePost = () => {\n    setOpenNewPost(true);\n  };\n\n  const handleCloseNewPost = () => {\n    setOpenNewPost(false);\n    reload();\n  };\n\n  async function loadTasks() {\n    console.log(\"key \", currentBCAccount.privateKey);\n    const response = await fetch(\"/loadTasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'user_key': currentBCAccount.privateKey\n      })\n    });\n    let result;\n    let newPosts = [];\n    await response.json().then(message => {\n      result = message[\"data\"];\n      result.map(task => {\n        newPosts.push({\n          id: task[0],\n          description: task[1],\n          pubkey: task[2]\n        });\n      });\n      setPostList(newPosts);\n    }); // await listenEvents()\n\n    return result;\n  }\n\n  async function loadYourTasks() {\n    const response = await fetch(\"/loadYourTasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'user_key': currentBCAccount.privateKey\n      })\n    });\n    let result;\n    let newYourPosts = [];\n    await response.json().then(message => {\n      result = message[\"data\"];\n      result.map(task => {\n        newYourPosts.push({\n          id: task[0],\n          description: task[1],\n          pubkey: task[2],\n          state: State[task[3]]\n        });\n      });\n      setYourPostList(newYourPosts);\n    }); // await listenEvents()\n\n    return result;\n  }\n\n  async function loadMinOffer(item) {\n    setSelectedItem(item);\n    const response = await fetch(\"/loadMinOffer\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'user_key': currentBCAccount.privateKey,\n        'id': item.id,\n        'x': keypair.x\n      })\n    });\n    let result;\n    let newPosts = [];\n    await response.json().then(message => {\n      result = message[\"min_offer\"];\n      let newdeal = result['deal'];\n      let raw_price = result['raw_price'];\n      setDeal(newdeal);\n      setMinOffer(raw_price);\n      setOpenOffer(true);\n    });\n  }\n\n  async function listenEvents() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n      contract.on(\"NewPrice\", (id, CL_price, CR_price) => {\n        console.log(\"event \", id, CL_price, CR_price);\n      }); // console.log(contract.events)\n      // await contract.events.NewPrice({}).on(\"data\", (e) => console.log(e));\n    }\n  }\n\n  useEffect(() => {\n    reload();\n  }, []);\n\n  const reload = async () => {\n    console.log(\"Closed..\");\n    await loadTasks();\n    await loadYourTasks();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '800px',\n      marginLeft: 100,\n      marginRight: 20\n    },\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      \"align-items\": \"center\",\n      style: {\n        width: '100%',\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true,\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'right'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          variant: \"outlined\",\n          color: \"primary\",\n          style: {\n            margin: '10px'\n          },\n          onClick: handlePost,\n          children: \" ADD POST \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          variant: \"outlined\",\n          color: \"primary\",\n          onClick: reload,\n          children: \" RELOAD \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          height: \"42%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          align: \"center\",\n          component: \"h2\",\n          style: {\n            color: \"#ab3402\"\n          },\n          children: \" ALL AVAILABLE TASKS \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: postList,\n          columns: columns,\n          pageSize: 8 //   checkboxSelection\n          ,\n          disableSelectionOnClick: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SimpleDialog, {\n          selectedItem: selectedItem,\n          open: open,\n          onClose: handleClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          height: \"42%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          align: \"center\",\n          component: \"h2\",\n          color: \"textPrimary\",\n          style: {\n            marginTop: '10px'\n          },\n          children: \" YOUR POSTING \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: yourPostList,\n          columns: columns2,\n          pageSize: 8 //   checkboxSelection\n          ,\n          disableSelectionOnClick: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DealDialog, {\n          selectedItem: selectedItem,\n          open: openOffer,\n          onClose: handleCloseOffer,\n          deal: deal,\n          price: minOffer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(NewPostDialog, {\n      open: openNewPost,\n      onClose: handleCloseNewPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Posts, \"UCiPtm5xuV0bX0udhmcfqIhmUfs=\", false, function () {\n  return [useAuth, useStyles];\n});\n\n_c = Posts;\nconst useStyles = makeStyles({\n  root: {\n    '& .super-app-theme--header': {\n      backgroundColor: '#ab3402',\n      color: 'white'\n    },\n    '& .super-app-theme--Filled': {\n      backgroundColor: '#094a14',\n      color: 'white',\n      fontFamily: 'Vazir',\n      fontWeight: 'bold'\n    }\n  }\n});\nexport default Posts;\n\nfunction SimpleDialog(props) {\n  _s2();\n\n  const classes = useStyles();\n  const {\n    currentBCAccount,\n    keypair,\n    loading,\n    balance\n  } = useAuth();\n  const [price, setPrice] = useState();\n  const {\n    onClose,\n    selectedItem,\n    open\n  } = props;\n\n  const handleClose = () => {\n    onClose(selectedItem);\n  };\n\n  async function sendPrice() {\n    const response = await fetch(\"/sendPrice\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'user_key': currentBCAccount.privateKey,\n        'pubkeyOfRequest': selectedItem.pubkey,\n        'price': price,\n        'id': selectedItem.id\n      })\n    });\n    console.log(selectedItem);\n    let result;\n    let newPosts = [];\n    await response.json().then(message => {// result = message[\"data\"]\n    });\n    handleClose();\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    \"aria-labelledby\": \"alert-dialog-title\",\n    fullWidth: true,\n    maxWidth: \"xs\",\n    onClose: handleClose,\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      style: {\n        backgroundColor: 'navy',\n        color: 'white'\n      },\n      id: \"alert-dialog-title\",\n      children: \"Offer a price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          fullWidth: true,\n          margin: \"dense\",\n          style: {\n            alignSelf: 'flex-start'\n          },\n          variant: \"subtitle1\",\n          children: selectedItem.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        onChange: e => setPrice(e.target.value),\n        autoFocus: true,\n        margin: \"dense\",\n        id: \"name\",\n        label: \"Price\",\n        type: \"number\",\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"primary\",\n        component: \"span\",\n        onClick: sendPrice,\n        children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(SimpleDialog, \"rUyO3z+gWjwowiubThoYEfCDzwo=\", false, function () {\n  return [useStyles, useAuth];\n});\n\n_c2 = SimpleDialog;\nSimpleDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedItem: PropTypes.shape({\n    id: PropTypes.number,\n    description: PropTypes.string.isRequired,\n    pubkey: PropTypes.string.isRequired\n  })\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Posts\");\n$RefreshReg$(_c2, \"SimpleDialog\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/pages/Posts.js"],"names":["xtype","AddPost","DialogTitle","DialogActions","DialogContent","DialogContentText","Dialog","Typography","Button","TextField","Grid","IconButton","DataGrid","XContract","text","ethers","useState","useEffect","makeStyles","green","SendIcon","VisibilityIcon","DealDialog","NewPostDialog","PropTypes","useAuth","contractAddress","Posts","props","currentBCAccount","keypair","loading","balance","postList","setPostList","yourPostList","setYourPostList","open","setOpen","openOffer","setOpenOffer","openNewPost","setOpenNewPost","selectedItem","setSelectedItem","id","description","pubkey","state","deal","setDeal","minOffer","setMinOffer","classes","useStyles","State","columns","field","headerName","width","headerClassName","flex","renderCell","params","handleClickOpen","disableClickEventBubbling","columns2","sortDescendingFirst","color","loadMinOffer","row","setTimeout","listenEvents","handleClickLoad","handleCloseOffer","value","console","log","handleClose","reload","handlePost","handleCloseNewPost","loadTasks","privateKey","response","fetch","method","headers","body","JSON","stringify","result","newPosts","json","then","message","map","task","push","loadYourTasks","newYourPosts","item","x","newdeal","raw_price","window","ethereum","provider","providers","Web3Provider","contract","Contract","abi","on","CL_price","CR_price","height","marginLeft","marginRight","root","display","alignItems","justifyContent","margin","marginTop","backgroundColor","fontFamily","fontWeight","SimpleDialog","price","setPrice","onClose","sendPrice","alignSelf","e","target","propTypes","func","isRequired","bool","shape","number","string"],"mappings":"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","sourcesContent":["import xtype from 'xtypejs'\nimport AddPost from '../components/AddPost';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from '@material-ui/core/Dialog';\nimport {Typography, Button, TextField, Grid} from '@material-ui/core'\nimport IconButton from '@material-ui/core/IconButton';\nimport { DataGrid } from '@material-ui/data-grid';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'\nimport text  from './../contract_address.json';\nimport {ethers} from 'ethers'\nimport {useState, useEffect} from 'react'\nimport { makeStyles } from '@material-ui/styles';\nimport { green } from '@material-ui/core/colors';\nimport SendIcon from '@material-ui/icons/Send';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport DealDialog from './components/Deal';\nimport NewPostDialog from './components/NewPost';\nimport PropTypes from 'prop-types';\nimport { useAuth } from \"../helper/AuthContext\"\nconst contractAddress = text['contract_address']\n\nfunction Posts (props) {\n    const { currentBCAccount, keypair, loading, balance} = useAuth()\n    const [postList, setPostList] = useState([])\n    const [yourPostList, setYourPostList] = useState([])\n    const [open, setOpen] = useState(false);\n    const [openOffer, setOpenOffer] = useState(false);\n    const [openNewPost, setOpenNewPost] = useState(false);\n    const [selectedItem, setSelectedItem] = useState({id:'', description: '', pubkey:'', state:''});\n    const [deal, setDeal] = useState();\n    const [minOffer, setMinOffer] = useState();\n    const classes = useStyles();\n    const State = ['Processing', 'Assigned', 'WaitingPaid', 'Closed', 'Cancel'] ;\n    const columns = [\n      { field: 'id', headerName: 'ID', width: 68, headerClassName: 'super-app-theme--header'},\n      {\n        field: 'description',\n        headerName: 'Description',\n        headerClassName: 'super-app-theme--header',\n        flex: 1\n      },\n      // {\n      //     field: 'id',\n      //     headerName: 'id',\n      //     type: 'number',\n      //     width: 50,\n      //     editable: true,\n      //   }\n      {\n        field: 'action',\n        headerName: 'Action', headerClassName: 'super-app-theme--header',\n        width: 150,\n        renderCell: (params) => (\n          <strong>\n\n            <Button\n              variant=\"outlined\" color=\"secondary\"\n              size=\"small\"\n              onClick={() => handleClickOpen(params)}>\n              Offer a price\n            </Button>\n          </strong>\n        ),\n        disableClickEventBubbling: true,\n      }\n    ];\n\n    const columns2 = [\n      { field: 'id', headerName: 'ID', width: 68, headerClassName: 'super-app-theme--Filled', sortDescendingFirst : true},\n      {\n        field: 'description',\n        headerName: 'Description',\n        headerClassName: 'super-app-theme--Filled',\n        flex: 1\n      },\n      {\n        field: 'state',\n        headerName: 'State',\n        headerClassName: 'super-app-theme--Filled',\n        flex: 1\n      },\n      {\n        field: 'minprice',\n        headerName: 'Min Price',\n        headerClassName: 'super-app-theme--Filled',\n        width: 150,\n        renderCell: (params) => (\n          <strong>\n            <IconButton\n              style={{ color: green[500] }}\n              size=\"small\"\n              onClick={() => loadMinOffer(params.row)}>\n\n              <VisibilityIcon/>\n            </IconButton>\n          </strong>\n        ),\n        disableClickEventBubbling: true,\n      },\n      {\n        field: 'action',\n        headerName: 'Action', headerClassName: 'super-app-theme--Filled',\n        width: 150,\n        renderCell: (params) => (\n          <strong>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"small\"\n              alignItem='center'\n              onClick={() => handleClickOpen(params)}>\n              Ok\n            </Button>\n          </strong>\n        ),\n        disableClickEventBubbling: true,\n      }\n    ];\n\n    setTimeout(()=>{\n      listenEvents()\n    }, 5000);\n    \n    const handleClickLoad = (params) => {\n\n      setSelectedItem(params.row)\n      \n      \n    };\n\n    const handleCloseOffer = (value) => {\n      setOpenOffer(false);\n      setSelectedItem(value);\n      \n    };\n    const handleClickOpen = (params) => {\n      console.log(params.row);\n      setSelectedItem(params.row)\n      setOpen(true);\n    };\n  \n    const handleClose = (value) => {\n      setOpen(false);\n      setSelectedItem(value);\n      reload();\n    };\n\n    const handlePost = () => {\n      setOpenNewPost(true);\n    };\n    const handleCloseNewPost = () => {\n      setOpenNewPost(false);\n      \n      reload();\n    };\n\n    async function loadTasks(){\n      console.log(\"key \", currentBCAccount.privateKey)\n      const response = await fetch(\"/loadTasks\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          'user_key': currentBCAccount.privateKey\n        })\n      })\n      let result\n      let newPosts = []\n      await response.json().then((message) => {\n        result = message[\"data\"]\n        result.map((task) => {\n          newPosts.push({id : task[0],\n            description : task[1],\n            pubkey: task[2]\n          })\n        })\n        setPostList(newPosts)\n  \n      });\n      // await listenEvents()\n      return result      \n    }\n\n    async function loadYourTasks(){\n      const response = await fetch(\"/loadYourTasks\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          'user_key': currentBCAccount.privateKey\n        })\n      })\n      let result\n      let newYourPosts = []\n      await response.json().then((message) => {\n        result = message[\"data\"]\n        result.map((task) => {\n          newYourPosts.push({id : task[0],\n            description : task[1],\n            pubkey: task[2],\n            state: State[task[3]]\n          })\n        })\n        setYourPostList(newYourPosts)\n\n      });\n      // await listenEvents()\n      return result      \n    }\n\n    async function loadMinOffer(item){\n      setSelectedItem(item)\n      const response = await fetch(\"/loadMinOffer\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            'user_key': currentBCAccount.privateKey,\n            'id': item.id,\n            'x': keypair.x\n          }),\n        })\n        \n        let result\n        let newPosts = []\n        await response.json().then((message) => {\n          result = message[\"min_offer\"]\n          let newdeal = result['deal']\n          let raw_price = result['raw_price']\n          setDeal(newdeal)\n          setMinOffer(raw_price)\n          setOpenOffer(true);\n        });\n   \n  }\n\n\n    async function listenEvents(){\n      \n      if (typeof window.ethereum !== 'undefined'){\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n        contract.on(\"NewPrice\", (id, CL_price, CR_price) => {\n          console.log(\"event \", id, CL_price, CR_price);\n        })\n        // console.log(contract.events)\n        // await contract.events.NewPrice({}).on(\"data\", (e) => console.log(e));\n      }\n    }\n\n    useEffect(() => {\n      reload();\n      }, [])\n  \n    const reload = async () =>{\n      console.log(\"Closed..\")\n      await loadTasks();\n      await loadYourTasks();\n    }\n    \n    \n\n    \n    return (\n        <div style={{ height: '800px',  marginLeft: 100, marginRight: 20}} className={classes.root}>\n          <Grid container align-items=\"center\" style={{width: '100%',height: \"100%\" }}>\n              <Grid item xs style={{display: 'flex', alignItems: 'center', justifyContent: 'right'}}>\n                <Button size =\"small\" variant=\"outlined\" color=\"primary\" style={{margin: '10px' }} onClick={handlePost} > ADD POST </Button>\n                <Button size =\"small\" variant=\"outlined\" color=\"primary\" onClick={reload} > RELOAD </Button>\n              </Grid>\n              <Grid item xs={12} style={{height: \"42%\"}}>\n              <Typography variant=\"h5\" align=\"center\" component=\"h2\" style={{ color: \"#ab3402\" }}> ALL AVAILABLE TASKS </Typography>\n                <DataGrid\n                  rows={postList}\n                  columns={columns}\n                  pageSize={8}\n                //   checkboxSelection\n                  disableSelectionOnClick\n                />\n                <SimpleDialog selectedItem={selectedItem} open={open} onClose={handleClose}/>\n               \n              </Grid>\n              <Grid item xs={12} style={{height: \"42%\"}}>\n                <Typography variant=\"h6\" align=\"center\" component=\"h2\" color='textPrimary' style={{ marginTop: '10px'}} > YOUR POSTING </Typography>\n                <DataGrid\n\n                  rows={yourPostList}\n                  columns={columns2}\n                  pageSize={8}\n                //   checkboxSelection\n                  disableSelectionOnClick\n                />\n                <DealDialog selectedItem={selectedItem} open={openOffer} onClose={handleCloseOffer} deal={deal} price={minOffer}/>\n              </Grid>\n              \n          </Grid>\n          <NewPostDialog open={openNewPost} onClose={handleCloseNewPost}/>\n      </div>\n  \n    );\n    \n}\n\nconst useStyles = makeStyles({\n  root: {\n    '& .super-app-theme--header': {\n      backgroundColor: '#ab3402',\n      color:'white',\n    },\n    '& .super-app-theme--Filled': {\n      backgroundColor: '#094a14',\n      color:'white',\n      fontFamily: 'Vazir',\n      fontWeight: 'bold'\n    }\n  }\n});\nexport default (Posts);\n\nfunction SimpleDialog(props) {\n  const classes = useStyles();\n  const { currentBCAccount, keypair, loading, balance} = useAuth()\n  const [price, setPrice] = useState()\n  const { onClose, selectedItem, open} = props;\n\n  const handleClose = () => {\n    onClose(selectedItem);\n  };\n\n  async function sendPrice (){\n    const response = await fetch(\"/sendPrice\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        'user_key': currentBCAccount.privateKey,\n        'pubkeyOfRequest': selectedItem.pubkey,\n        'price': price,\n        'id': selectedItem.id\n      }),\n    })\n    console.log(selectedItem)\n    let result\n    let newPosts = []\n    await response.json().then((message) => {\n      // result = message[\"data\"]\n      \n    });\n    handleClose()\n  };\n\n  return (\n    <Dialog aria-labelledby=\"alert-dialog-title\" fullWidth maxWidth='xs' onClose={handleClose} open={open}>\n        <DialogTitle  style={{ backgroundColor: 'navy', color: 'white' }} id=\"alert-dialog-title\">\n          Offer a price\n        </DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n              <Typography fullWidth margin=\"dense\" style={{ alignSelf: 'flex-start'}} variant=\"subtitle1\">{selectedItem.description}</Typography>\n            </DialogContentText>\n              <TextField onChange={e => setPrice(e.target.value)} autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Price\"\n                        type=\"number\"\n                        fullWidth          />\n        </DialogContent>\n        <DialogActions>\n          <IconButton color=\"primary\" component=\"span\" onClick={sendPrice}>\n                <SendIcon />\n          </IconButton>\n        </DialogActions>\n\n    </Dialog>\n  );\n}\n\nSimpleDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  selectedItem: PropTypes.shape({\n    id: PropTypes.number,\n    description: PropTypes.string.isRequired,\n    pubkey: PropTypes.string.isRequired\n  })\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}