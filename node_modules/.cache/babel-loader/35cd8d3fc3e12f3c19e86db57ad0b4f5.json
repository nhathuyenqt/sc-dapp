{"ast":null,"code":"var _jsxFileName = \"/Users/kzjouf/Desktop/project/scdapp/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Typography, Button, AppBar, Spinner, Card, CircularProgress, Container, CardActions, Grid, CardContent, CardMedia, TextField } from '@material-ui/core';\nimport useStyles from './Styles.js';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport xtype from 'xtypejs';\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json';\nimport { ContactSupportOutlined } from '@material-ui/icons'; // const contractAddress = '0x2c934A1a4F5fC1E96Cf55FDbCbFc4614580B730a' // rinkeby\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = '0x5BEC9f4e31c8c87224C41E6500584f96195D0BcA';\nvar loading = false;\n\nfunction Home() {\n  _s();\n\n  const reader = new FileReader();\n  fetch(raw).then(r => r.text()).then(text => {\n    console.log('text decoded:', text);\n  });\n  const c = reader.readAsText(\"./../../contract_address.txt\");\n  console.log(\"check \", c);\n  const classes = useStyles();\n  const [greeting, setGreetingValue] = useState('');\n  const [userAccount, setUserAccount] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [balance, setBalance] = useState();\n  const [amount, setAmount] = useState();\n  const [recipient, setTo] = useState(\"0xC5e65BF63b33B865e78A02b13f0db60713c3Ff96\");\n  const [currentTime, setCurrentTime] = useState(0);\n  const [accId, setAccId] = useState(0);\n  const [y, setY] = useState(\"\");\n  const [g, setG] = useState(\"\");\n  const [x, setX] = useState(\"\");\n  const [accPubkey, setAccPubkey] = useState(\"\");\n  const [pubkeyList, setPubkeyList] = useState({});\n  useEffect(() => {\n    fetch('/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n  }, []); // useEffect(() => {\n  //   requestAccount()\n  // });\n\n  if (window.ethereum) {\n    window.ethereum.on('accountsChanged', function (accounts) {\n      setUserAccount(accounts[0]);\n    });\n  } // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n\n  async function requestAccount() {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    console.log(accounts[0]);\n    setUserAccount(accounts[0]);\n  } // function getAccounts(callback) {\n  //   web3.eth.getAccounts((error,result) => {\n  //       if (error) {\n  //           console.log(error);\n  //       } else {\n  //           callback(result);\n  //       }\n  //   });\n  // }\n\n\n  async function setGreeting() {\n    if (!greeting) return;\n\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.setGreeting(greeting);\n      await transaction.wait();\n      contract.on(\"TestMsg\", msg => {\n        console.log('Msg : ', msg);\n      });\n      fetchGreeting();\n    }\n  }\n\n  async function fetchGreeting() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n\n      try {\n        const data = await contract.greet();\n        setGreetingValue(data);\n        console.log('data: ', data);\n      } catch (err) {\n        console.log(\"Error: \", err);\n      }\n    }\n  }\n\n  async function getBalance() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider);\n      const signer = provider.getSigner();\n      const [account] = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const acc = signer.getAddress();\n      const b = await contract.balanceOf(account); // setAmount(balance.toString())\n\n      console.log('provider: ', provider);\n      console.log('signer: ', signer);\n      console.log('address: ', acc);\n      console.log('balance: ', b.toString());\n      setBalance(b.toString());\n      setLoading(false);\n    }\n  }\n\n  async function register() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      // await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      console.log(\"signer \", signer); // const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      // const transaction = await contract.register()\n      // var accounts = await provider.getAccounts();\n      // console.log(accounts[0])\n      // await transaction.wait()\n      // let a = '0'\n      // signer.getAddress().then((address) => {\n      //   a = address\n      // });\n      // let b = provider.getBalance(a)\n      // setAddress(a)\n      // getBalance()\n      // setLoading(false)\n      // \n    }\n  }\n\n  async function genKey() {\n    console.log(accId);\n    const response = await fetch(\"/genKey\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        accId: accId\n      })\n    });\n    let result;\n    await response.json().then(message => {\n      result = message[\"data\"];\n      console.log(result);\n      const yy = result[\"y\"];\n      console.log(yy);\n      setY(yy);\n      setX(result[\"x\"]);\n      setG(result[\"g\"]);\n      let pubkey = pubkeyList;\n      const i = parseInt(accId, 10);\n      pubkey[i] = y;\n      setPubkeyList(pubkeyList);\n      console.log(\"pubkey1 \", pubkeyList);\n    });\n    console.log(y);\n    console.log(\"x \", x);\n    console.log(\"pubkey \", pubkeyList);\n  }\n\n  async function genProof() {\n    const response = await fetch(\"/genProof\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        amt: amount\n      })\n    });\n    let result;\n    await response.json().then(message => {\n      result = JSON.stringify(message[\"data\"]);\n    });\n    return result;\n  }\n\n  async function getElBalance() {\n    setLoading(true);\n\n    if (typeof window.ethereum !== 'undefined') {\n      const response = await fetch(\"/getElBalance\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          y: y,\n          accId: accId\n        })\n      });\n      setLoading(false); // const provider = new ethers.providers.Web3Provider(window.ethereum)\n      // const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      // const signer =  provider.getSigner()\n      // const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      // const acc = signer.getAddress()\n      // const b = await contract.ElBalanceOf(y)\n      // console.log('address: ', acc)\n      // console.log('balance: ', b.toString())\n      // setBalance(b.toString())\n      // setLoading(false)\n    }\n  }\n\n  async function sendPrivateToken() {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer); // function sendPrivateToken(function() {\n      //   console.log('huzzah, I\\'m done!');\n      // });\n\n      let messageProof = await genProof(); // console.log(\"Check type of Proof 1 : \", messageProof);\n      // console.log(\"hello 2\");\n      // let msg2 = JSON.stringify(messageProof)\n      // msg2 =  \"hello\"\n      // const transaction = await contract.privateTransfer(msg2);\n      // console.log(\"transaction\", transaction);\n    }\n  }\n\n  async function genConfProof() {\n    setLoading(true);\n    const response = await fetch(\"/confTransfer\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        'y_sender': pubkeyList[0],\n        'y_recipient': pubkeyList[1],\n        'amt': 3,\n        'b_after': 197\n      })\n    });\n    setLoading(false);\n    let result;\n    await response.json().then(message => {\n      result = JSON.stringify(message[\"data\"]);\n    });\n    return result;\n  }\n\n  async function confTransfer() {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer); // function sendPrivateToken(function() {\n      //   console.log('huzzah, I\\'m done!');\n      // });\n\n      let messageProof = await genConfProof(); // console.log(\"Check type of Proof 1 : \", messageProof);\n      // console.log(\"hello 2\");\n\n      let msg2 = JSON.stringify(messageProof); // msg2 =  \"hello\"ßßßßßßßßß\n\n      const transaction = await contract.confTransfer(msg2, msg2);\n      console.log(\"transaction\", transaction);\n    }\n  }\n\n  async function sendCoins() {\n    var messageProof;\n\n    if (typeof window.ethereum !== 'undefined') {\n      fetch(\"/genProof\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          amt: amount\n        })\n      }).then(response => response.json()).then(message => {\n        messageProof = JSON.stringify(message['data']);\n        console.log(messageProof);\n        console.log(\"Check type of Proof: \", xtype(messageProof));\n      });\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer);\n      const transaction = await contract.transfer(recipient, amount); // const transaction = await contract.privateTransfer(messageProof)\n      // await transaction.wait()\n\n      contract.on(\"UpdateState\", (add, newBal) => {\n        console.log(\"sender \", add);\n        console.log(\"new Balance \", newBal.toString());\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: \" Nhat Huyen's Internship \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The current time is \", currentTime, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      className: classes.cardGrid,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 4,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxWidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Account \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                textAlign: \"left\",\n                children: [\" \", userAccount, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                textAlign: \"left\",\n                children: [\" \", greeting]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAccId(e.target.value),\n                placeholder: \"ACC ID\",\n                variant: \"outlined\",\n                fullWidthadf: true,\n                color: \"secondary\",\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: register,\n                children: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: genKey,\n                children: \"Generate Key-pair\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getElBalance,\n                children: \"Get El Balance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: classes.card,\n            maxWidth: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              className: classes.cardContent,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                variant: \"h5\",\n                children: \" Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 15\n              }, this), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                size: 24,\n                className: classes.buttonProgress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                gutterBottom: true,\n                children: [\" \", balance]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAccPubkey(e.target.value),\n                placeholder: \"My Account Public Key\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                value: accPubkey,\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setTo(e.target.value),\n                placeholder: \"Recipient Public Key\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                defaultValue: recipient,\n                className: classes.field\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                onChange: e => setAmount(e.target.value),\n                placeholder: \"Amount\",\n                variant: \"outlined\",\n                fullWidth: true,\n                color: \"secondary\",\n                className: classes.field,\n                defaultValue: 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: getBalance,\n                children: \" Get Balance \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: sendCoins,\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: sendPrivateToken,\n                children: \"Send Token\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                color: \"primary\",\n                onClick: confTransfer,\n                children: \"Conf Transfer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"+4od4UwGkayQQT1YDYGR0NFpOd4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/kzjouf/Desktop/project/scdapp/src/pages/Home.js"],"names":["React","Typography","Button","AppBar","Spinner","Card","CircularProgress","Container","CardActions","Grid","CardContent","CardMedia","TextField","useStyles","useState","useEffect","ethers","xtype","XContract","ContactSupportOutlined","contractAddress","loading","Home","reader","FileReader","fetch","raw","then","r","text","console","log","c","readAsText","classes","greeting","setGreetingValue","userAccount","setUserAccount","setLoading","balance","setBalance","amount","setAmount","recipient","setTo","currentTime","setCurrentTime","accId","setAccId","y","setY","g","setG","x","setX","accPubkey","setAccPubkey","pubkeyList","setPubkeyList","res","json","data","time","window","ethereum","on","accounts","requestAccount","request","method","setGreeting","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","transaction","wait","msg","fetchGreeting","greet","err","getBalance","account","acc","getAddress","b","balanceOf","toString","register","genKey","response","headers","body","JSON","stringify","result","message","yy","pubkey","i","parseInt","genProof","amt","getElBalance","sendPrivateToken","messageProof","genConfProof","confTransfer","msg2","sendCoins","transfer","add","newBal","cardGrid","card","cardContent","e","target","value","field","buttonProgress"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport {Typography, Button, AppBar, Spinner, Card,  CircularProgress, Container, CardActions, Grid, CardContent, CardMedia, TextField} from '@material-ui/core'\n\nimport  useStyles  from './Styles.js';\nimport {useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport xtype from 'xtypejs'\n\n\nimport XContract from './../artifacts/contracts/XContract.sol/XContract.json'\nimport { ContactSupportOutlined } from '@material-ui/icons';\n\n\n// const contractAddress = '0x2c934A1a4F5fC1E96Cf55FDbCbFc4614580B730a' // rinkeby\nconst contractAddress = '0x5BEC9f4e31c8c87224C41E6500584f96195D0BcA'\nvar loading = false;\n\nfunction Home() {\n  const reader = new FileReader()\n  fetch(raw)\n  .then(r => r.text())\n  .then(text => {\n    console.log('text decoded:', text);\n  });\n  const c = reader.readAsText(\"./../../contract_address.txt\")\n  console.log(\"check \",c)\n  const classes = useStyles()\n  \n  const [greeting, setGreetingValue] = useState('')\n  const [userAccount, setUserAccount] = useState('')\n  const [loading, setLoading] = useState(false);\n  const [balance, setBalance] = useState()\n  const [amount, setAmount] = useState()\n  const [recipient, setTo] = useState(\"0xC5e65BF63b33B865e78A02b13f0db60713c3Ff96\")\n  const [currentTime, setCurrentTime] = useState(0);\n  const [accId, setAccId] = useState(0);\n  const [y, setY] = useState(\"\");\n  const [g, setG] = useState(\"\");\n  const [x, setX] = useState(\"\");\n  const [accPubkey, setAccPubkey] = useState(\"\");\n  const [pubkeyList, setPubkeyList] = useState({});\n\n\n  useEffect(() => {\n    fetch('/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n  }, []);\n\n  // useEffect(() => {\n  //   requestAccount()\n  // });\n  if (window.ethereum){\n    window.ethereum.on('accountsChanged', function(accounts){\n      setUserAccount(accounts[0])\n\n    })\n  }\n  // async function updateStateEventListener(callback) {\n  //   await requestAccount()\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //   const signer = provider.getSigner();\n  //   const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n  //   const updateStateEvent = contract.UpdateState()\n  //   return updateStateEvent.watch(callback)\n  // }\n\n  async function requestAccount(){\n    const accounts = await window.ethereum.request({method : 'eth_requestAccounts'})\n    console.log(accounts[0]);\n    setUserAccount(accounts[0])\n\n  }\n  // function getAccounts(callback) {\n  //   web3.eth.getAccounts((error,result) => {\n  //       if (error) {\n  //           console.log(error);\n  //       } else {\n  //           callback(result);\n  //       }\n  //   });\n  // }\n  \n\n  async function setGreeting(){\n    if (!greeting) return\n    if (typeof window.ethereum !== 'undefined'){\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.setGreeting(greeting)\n      await transaction.wait()\n\n      contract.on(\"TestMsg\", (msg) => {\n        console.log('Msg : ', msg);\n      });\n\n      fetchGreeting()\n    }\n  }\n  async function fetchGreeting(){\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      try{\n        const data = await contract.greet()\n        setGreetingValue(data)\n        console.log('data: ', data)\n      } catch(err){\n        console.log(\"Error: \", err)\n      }\n    }\n  }\n\n  async function getBalance(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      const signer =  provider.getSigner()\n      const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      const acc = signer.getAddress()\n\n      const b = await contract.balanceOf(account)\n      // setAmount(balance.toString())\n      console.log('provider: ', provider)\n      console.log('signer: ', signer)\n      console.log('address: ', acc)\n      console.log('balance: ', b.toString())\n      setBalance(b.toString())\n      setLoading(false)\n    }\n  }\n\n  async function register(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n      // await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      console.log(\"signer \", signer)\n      // const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      // const transaction = await contract.register()\n      // var accounts = await provider.getAccounts();\n      // console.log(accounts[0])\n      // await transaction.wait()\n      // let a = '0'\n      // signer.getAddress().then((address) => {\n      //   a = address\n      // });\n      // let b = provider.getBalance(a)\n      // setAddress(a)\n      \n      // getBalance()\n      // setLoading(false)\n      // \n    }\n  }\n\n  async function genKey(){\n    console.log(accId)\n    const response = await fetch(\"/genKey\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        accId: accId\n      }),\n    })\n\n    let result\n    await response.json().then((message) => {\n      result = message[\"data\"];\n      console.log(result);\n      const yy  = result[\"y\"];\n      console.log(yy);\n      setY(yy);\n      setX(result[\"x\"]);\n      setG(result[\"g\"]);\n      \n      let pubkey = pubkeyList\n      const i = parseInt(accId, 10)\n      pubkey[i] = y;\n      setPubkeyList(pubkeyList);\n      console.log(\"pubkey1 \", pubkeyList);\n    });\n\n      \n      console.log(y); \n      console.log(\"x \", x);\n      console.log(\"pubkey \", pubkeyList);\n\n  }\n\n  async function genProof() {\n    const response = await fetch(\"/genProof\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        amt: amount,\n      }),\n    })\n    let result\n    await response.json().then((message) => {\n      result = JSON.stringify(message[\"data\"]);\n\n    });\n    return result\n  }\n\n  async function getElBalance(){\n    setLoading(true)\n    if (typeof window.ethereum !== 'undefined'){\n\n      const response = await fetch(\"/getElBalance\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          y: y,\n          accId : accId\n        }),\n      })\n      setLoading(false)\n      // const provider = new ethers.providers.Web3Provider(window.ethereum)\n      // const contract = new ethers.Contract(contractAddress, XContract.abi, provider)\n      // const signer =  provider.getSigner()\n      // const [account] = await window.ethereum.request({method: 'eth_requestAccounts'})\n      // const acc = signer.getAddress()\n      // const b = await contract.ElBalanceOf(y)\n      // console.log('address: ', acc)\n      // console.log('balance: ', b.toString())\n      // setBalance(b.toString())\n      // setLoading(false)\n    }\n  }\n\n  async function sendPrivateToken() {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        contractAddress,\n        XContract.abi,\n        signer\n      );\n      // function sendPrivateToken(function() {\n      //   console.log('huzzah, I\\'m done!');\n      // });\n      let messageProof = await genProof();\n      // console.log(\"Check type of Proof 1 : \", messageProof);\n      // console.log(\"hello 2\");\n      // let msg2 = JSON.stringify(messageProof)\n      // msg2 =  \"hello\"\n      // const transaction = await contract.privateTransfer(msg2);\n      // console.log(\"transaction\", transaction);\n\n      \n    }\n  }\n\n  async function genConfProof() {\n    setLoading(true)\n      const response = await fetch(\"/confTransfer\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          'y_sender': pubkeyList[0],\n          'y_recipient': pubkeyList[1],\n          'amt':3,\n          'b_after':197\n        }),\n      })\n      setLoading(false)\n      let result\n      await response.json().then((message) => {\n        result = JSON.stringify(message[\"data\"]);\n\n      });\n      return result\n      \n\n    \n  }\n  async function confTransfer() {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(\n        contractAddress,\n        XContract.abi,\n        signer\n      );\n      // function sendPrivateToken(function() {\n      //   console.log('huzzah, I\\'m done!');\n      // });\n      let messageProof = await genConfProof();\n      // console.log(\"Check type of Proof 1 : \", messageProof);\n      // console.log(\"hello 2\");\n      let msg2 = JSON.stringify(messageProof)\n      // msg2 =  \"hello\"ßßßßßßßßß\n      const transaction = await contract.confTransfer(msg2, msg2);\n      console.log(\"transaction\", transaction);\n\n      \n    }\n  }\n\n\n  \n  async function sendCoins(){\n    var messageProof\n    if (typeof window.ethereum !== 'undefined'){\n\n      fetch(\"/genProof\",\n        {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                amt: amount\n            }),\n        }).then((response) => response.json())\n        .then((message) => {\n          messageProof = JSON.stringify(message['data'])\n          console.log(messageProof)\n          console.log(\"Check type of Proof: \", xtype(messageProof))\n        });\n     \n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(contractAddress, XContract.abi, signer)\n      const transaction = await contract.transfer(recipient, amount)\n      // const transaction = await contract.privateTransfer(messageProof)\n      \n      // await transaction.wait()\n      \n      contract.on(\"UpdateState\", (add, newBal) => {\n   \n          console.log(\"sender \", add)\n          console.log(\"new Balance \", newBal.toString())\n          \n       \n      });\n    }\n  }\n\n  return (\n    <div className='home'>\n      <h1>Home</h1>\n      <Typography variant = \"h4\"> Nhat Huyen's Internship </Typography>\n      <p>The current time is {currentTime}.</p>\n      <Container maxWidth = \"sm\" className = {classes.cardGrid}> \n        <Grid container spacing ={4}>\n          <Grid item> \n            <Card className ={classes.card} maxWidth = \"md\">\n              {/* <CardMedia \n                className ={classes.cardMedia}\n                  image =\"https://source.unsplash.com/random\"\n                  title=\"Image title\" /> */}\n\n              <CardContent className = {classes.cardContent}>\n                <Typography gutterBottom variant = \"h5\"> Account </Typography>\n                \n                {/* <Dimmer active inverted>\n                  <Loader>Loading</Loader>\n                </Dimmer> */}\n                \n              \n            \n                <Typography textAlign='left'> {userAccount} </Typography>\n                <Typography textAlign='left'> {greeting}</Typography>\n                {/* <input \n                  onChange={e => setGreetingValue(e.target.value)} \n                  placeholder=\"Set greeting\"\n                  value = {greeting}\n                /> */}\n                <TextField\n                  onChange={e => setAccId(e.target.value)} \n                  placeholder=\"ACC ID\"\n                  variant='outlined'\n                  fullWidthadf\n                  color =\"secondary\"\n                  className={classes.field}\n                />\n              </CardContent>\n              <CardActions>\n               \n                <Button size =\"small\" color=\"primary\" onClick={register} >Register</Button>\n                <Button size =\"small\" color=\"primary\" onClick={genKey} >Generate Key-pair</Button>\n                <Button size =\"small\" color=\"primary\" onClick={getElBalance} >Get El Balance</Button>\n                \n              </CardActions>\n            </Card>\n          </Grid>\n          <Grid item>\n              <Card className ={classes.card} maxWidth = \"md\">\n            {/* <CardMedia \n              className ={classes.cardMedia}\n                image =\"https://source.unsplash.com/random\"\n                title=\"Image title\" /> */}\n\n            <CardContent className = {classes.cardContent}>\n              <Typography gutterBottom variant = \"h5\"> Balance </Typography>\n              {loading && (\n                    <CircularProgress size={24} className={classes.buttonProgress} />\n                )}\n              <Typography gutterBottom> {balance}</Typography>\n              <TextField onChange={e => setAccPubkey(e.target.value)} placeholder=\"My Account Public Key\" \n                    variant='outlined'\n                    fullWidth\n                    color =\"secondary\"\n                    value = {accPubkey}\n                    className={classes.field}/>\n              <TextField onChange={e => setTo(e.target.value)} placeholder=\"Recipient Public Key\" \n                    variant='outlined'\n                    fullWidth\n                    color =\"secondary\"\n                    defaultValue = {recipient}\n                    className={classes.field}/>\n              <TextField onChange={e => setAmount(e.target.value)} placeholder=\"Amount\" variant='outlined'\n                  fullWidth\n                  color =\"secondary\"\n                  className={classes.field}\n                  defaultValue = {1}\n                /> \n            </CardContent>\n            <CardActions>\n              <Button size =\"small\" color=\"primary\" onClick={getBalance} > Get Balance </Button>\n              <Button size =\"small\" color=\"primary\" onClick={sendCoins} >Send</Button>\n              <Button size =\"small\" color=\"primary\" onClick={sendPrivateToken} >Send Token</Button>\n              <Button size =\"small\" color=\"primary\" onClick={confTransfer} >Conf Transfer</Button>\n              \n            </CardActions>\n          </Card>\n          </Grid>\n        </Grid>\n      </Container>\n      \n    </div>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}