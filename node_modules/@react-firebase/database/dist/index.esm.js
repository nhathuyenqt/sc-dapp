import { Component, createElement, Fragment, createContext } from 'react';
import * as firebase from 'firebase/app';
import { renderAndAddProps } from 'render-and-add-props';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var FirebaseDatabaseContextConsumerLifeCycle = (function (_super) {
    __extends(FirebaseDatabaseContextConsumerLifeCycle, _super);
    function FirebaseDatabaseContextConsumerLifeCycle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDatabaseContextConsumerLifeCycle.prototype.listenToNodeIfNotInContext = function () {
        var _a = this.props, dataTree = _a.dataTree, path = _a.path, listenTo = _a.listenTo;
        if (path in dataTree) {
            return;
        }
        listenTo(this.props);
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.stopListeningToNode = function () {
        var _a = this.props, stopListeningTo = _a.stopListeningTo, path = _a.path;
        stopListeningTo(path);
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.componentDidMount = function () {
        this.listenToNodeIfNotInContext();
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.componentDidUpdate = function () {
        this.listenToNodeIfNotInContext();
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.componentWillUnmount = function () {
        this.stopListeningToNode();
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.render = function () {
        return null;
    };
    return FirebaseDatabaseContextConsumerLifeCycle;
}(Component));

require('@firebase/database');

/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var _a;
var firebaseDatabaseDefaultContext = {
    listenTo: function (_a) { },
    stopListeningTo: function (path) { },
    dataTree: {},
    firebase: firebase
};
var FirebaseDatabaseContextProvider = (_a = createContext(firebaseDatabaseDefaultContext), _a.Provider), FirebaseDatabaseContextConsumer = _a.Consumer;

var initializeFirebaseApp = function (_a) {
    var firebase$$1 = _a.firebase, authDomain = _a.authDomain, databaseURL = _a.databaseURL, projectId = _a.projectId, storageBucket = _a.storageBucket, messagingSenderId = _a.messagingSenderId, apiKey = _a.apiKey;
    try {
        firebase$$1.initializeApp({
            apiKey: apiKey,
            authDomain: authDomain,
            databaseURL: databaseURL,
            projectId: projectId,
            storageBucket: storageBucket,
            messagingSenderId: messagingSenderId
        });
    }
    catch (err) {
        if (err.code !== "app/duplicate-app") {
            throw err;
        }
    }
};

var getFirebaseQuery = function (_a) {
    var _b = _a.firebase, firebase$$1 = _b === void 0 ? null : _b, path = _a.path, _c = _a.orderByChild, orderByChild = _c === void 0 ? null : _c, _d = _a.orderByKey, orderByKey = _d === void 0 ? null : _d, _e = _a.orderByValue, orderByValue = _e === void 0 ? null : _e, _f = _a.limitToFirst, limitToFirst = _f === void 0 ? null : _f, _g = _a.limitToLast, limitToLast = _g === void 0 ? null : _g, _h = _a.startAt, startAt = _h === void 0 ? null : _h, _j = _a.endAt, endAt = _j === void 0 ? null : _j, _k = _a.equalTo, equalTo = _k === void 0 ? null : _k;
    if (firebase$$1 === null) {
        throw new Error("Need to supply firebase argument to getFirebaseQuery");
    }
    if (path === null || typeof path === "undefined") {
        throw new Error("Need to supply path argument to getFirebaseQuery");
    }
    var result = firebase$$1.database().ref(path);
    if (orderByChild !== null) {
        result = result.orderByChild(orderByChild);
    }
    if (orderByKey !== null) {
        result = result.orderByKey();
    }
    if (orderByValue !== null) {
        result = result.orderByValue();
    }
    if (limitToFirst !== null) {
        result = result.limitToFirst(limitToFirst);
    }
    if (limitToLast !== null) {
        result = result.limitToLast(limitToLast);
    }
    if (startAt !== null) {
        result = result.startAt(startAt);
    }
    if (endAt !== null) {
        result = result.endAt(endAt);
    }
    if (equalTo !== null) {
        result = result.equalTo(equalTo);
    }
    return result;
};

var actions = {
    addPathToData: function (state, _a) {
        var path = _a.path, newData = _a.data, unsub = _a.unsub, isLoading = _a.isLoading;
        var _b;
        var data = Object.assign({}, state.dataTree, (_b = {},
            _b[path] = { value: newData, unsub: unsub, isLoading: isLoading },
            _b));
        var newState = Object.assign({}, state, { dataTree: data });
        return newState;
    }
};

var FirebaseDatabaseProvider = (function (_super) {
    __extends(FirebaseDatabaseProvider, _super);
    function FirebaseDatabaseProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.listenTo = function (firebaseQuery) { return __awaiter(_this, void 0, void 0, function () {
            var path, ref, unsub;
            var _this = this;
            return __generator(this, function (_a) {
                path = firebaseQuery.path;
                if (path in this.state.dataTree) {
                    return [2];
                }
                ref = getFirebaseQuery(Object.assign({}, firebaseQuery, { firebase: this.state.firebase }));
                this.setState(function (state) {
                    return actions.addPathToData(state, {
                        path: path,
                        data: null,
                        unsub: function () { },
                        isLoading: true
                    });
                });
                unsub = ref.on("value", function (d) {
                    if (d === null || typeof d === "undefined")
                        return;
                    _this.setState(function (state) {
                        return actions.addPathToData(state, {
                            path: path,
                            data: d.val(),
                            unsub: unsub,
                            isLoading: false
                        });
                    });
                });
                return [2];
            });
        }); };
        _this.state = {
            firebase: props.firebase,
            dataTree: {},
            listenTo: _this.listenTo.bind(_this),
            stopListeningTo: _this.stopListeningTo.bind(_this)
        };
        initializeFirebaseApp(_this.props);
        return _this;
    }
    FirebaseDatabaseProvider.prototype.stopListeningTo = function (path) {
        if (!(path in this.state.dataTree)) {
            return;
        }
        this.state.dataTree[path].unsub();
    };
    FirebaseDatabaseProvider.prototype.componentWillUnmount = function () {
        var dataTree = this.state.dataTree;
        Object.keys(dataTree).forEach(function (key) { return dataTree[key].unsub && dataTree[key].unsub(); });
    };
    FirebaseDatabaseProvider.prototype.render = function () {
        var children = this.props.children;
        return (createElement(FirebaseDatabaseContextProvider, { value: this.state }, renderAndAddProps(children, {})));
    };
    return FirebaseDatabaseProvider;
}(Component));

var FirebaseDatabaseContextConsumerLifeCycle$1 = (function (_super) {
    __extends(FirebaseDatabaseContextConsumerLifeCycle, _super);
    function FirebaseDatabaseContextConsumerLifeCycle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDatabaseContextConsumerLifeCycle.prototype.listenToNodeIfNotInContext = function () {
        var _a = this.props, dataTree = _a.dataTree, path = _a.path, listenTo = _a.listenTo;
        if (path in dataTree) {
            return;
        }
        listenTo(this.props);
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.stopListeningToNode = function () {
        var _a = this.props, stopListeningTo = _a.stopListeningTo, path = _a.path;
        stopListeningTo(path);
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.componentDidMount = function () {
        this.listenToNodeIfNotInContext();
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.componentDidUpdate = function () {
        this.listenToNodeIfNotInContext();
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.componentWillUnmount = function () {
        this.stopListeningToNode();
    };
    FirebaseDatabaseContextConsumerLifeCycle.prototype.render = function () {
        return null;
    };
    return FirebaseDatabaseContextConsumerLifeCycle;
}(Component));

var FirebaseDatabaseNode = (function (_super) {
    __extends(FirebaseDatabaseNode, _super);
    function FirebaseDatabaseNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDatabaseNode.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, path = _a.path;
        return (createElement(FirebaseDatabaseContextConsumer, null, function (context) {
            return (createElement(Fragment, null,
                createElement(FirebaseDatabaseContextConsumerLifeCycle$1, __assign({}, context, { path: path }, _this.props)),
                renderAndAddProps(children, __assign({ path: path }, context.dataTree[path]))));
        }));
    };
    return FirebaseDatabaseNode;
}(Component));

var FirebaseDatabaseMutationWithContext = (function (_super) {
    __extends(FirebaseDatabaseMutationWithContext, _super);
    function FirebaseDatabaseMutationWithContext() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createMutationRunner = function () {
            var _a = _this.props, firebase$$1 = _a.firebase, path = _a.path, type = _a.type;
            var firebaseRef = firebase$$1
                .app()
                .database()
                .ref(path);
            var runMutation;
            switch (type) {
                case "push": {
                    runMutation = function (value) { return __awaiter(_this, void 0, void 0, function () {
                        var key;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4, firebaseRef.push(value).key];
                                case 1:
                                    key = _a.sent();
                                    return [2, {
                                            path: path,
                                            value: value,
                                            type: type,
                                            key: key
                                        }];
                            }
                        });
                    }); };
                    break;
                }
                case "update": {
                    runMutation = function (value) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4, firebaseRef.update(value)];
                                case 1:
                                    _a.sent();
                                    return [2, {
                                            path: path,
                                            value: value,
                                            type: type,
                                            key: null
                                        }];
                            }
                        });
                    }); };
                    break;
                }
                case "set": {
                    runMutation = function (value) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4, firebaseRef.set(value)];
                                case 1:
                                    _a.sent();
                                    return [2, {
                                            path: path,
                                            value: value,
                                            type: type,
                                            key: null
                                        }];
                            }
                        });
                    }); };
                    break;
                }
                default: {
                    throw new Error("Unsupported mutation type " + type + ". \nPlease file an issue if you'd like to see us support it !");
                }
            }
            return runMutation;
        };
        return _this;
    }
    FirebaseDatabaseMutationWithContext.prototype.shouldComponentUpdate = function (nextProps) {
        return (nextProps.path !== this.props.path ||
            nextProps.firebase !== this.props.firebase);
    };
    FirebaseDatabaseMutationWithContext.prototype.render = function () {
        var children = this.props.children;
        var runMutation = this.createMutationRunner();
        return renderAndAddProps(children, __assign({ runMutation: runMutation }, this.props));
    };
    return FirebaseDatabaseMutationWithContext;
}(Component));
var FirebaseDatabaseMutation = (function (_super) {
    __extends(FirebaseDatabaseMutation, _super);
    function FirebaseDatabaseMutation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDatabaseMutation.prototype.render = function () {
        var _a = this.props, children = _a.children, type = _a.type, path = _a.path;
        return (createElement(FirebaseDatabaseContextConsumer, null, function (context) { return (createElement(FirebaseDatabaseMutationWithContext, __assign({ type: type, path: path }, context, { children: children }))); }));
    };
    return FirebaseDatabaseMutation;
}(Component));

var FirebaseDatabaseTransactionWithContext = (function (_super) {
    __extends(FirebaseDatabaseTransactionWithContext, _super);
    function FirebaseDatabaseTransactionWithContext() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createTransactionRunner = function () {
            var _a = _this.props, firebase$$1 = _a.firebase, path = _a.path;
            var firebaseRef = firebase$$1
                .app()
                .database()
                .ref(path);
            var runTransaction = function (_a) {
                var reducer = _a.reducer;
                return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4, firebaseRef.transaction(reducer)];
                            case 1:
                                _b.sent();
                                return [2, { path: path }];
                        }
                    });
                });
            };
            return runTransaction;
        };
        return _this;
    }
    FirebaseDatabaseTransactionWithContext.prototype.shouldComponentUpdate = function (nextProps) {
        return (nextProps.path !== this.props.path ||
            nextProps.firebase !== this.props.firebase);
    };
    FirebaseDatabaseTransactionWithContext.prototype.render = function () {
        var children = this.props.children;
        var runTransaction = this.createTransactionRunner();
        return renderAndAddProps(children, __assign({ runTransaction: runTransaction }, this.props));
    };
    return FirebaseDatabaseTransactionWithContext;
}(Component));
var FirebaseDatabaseTransaction = (function (_super) {
    __extends(FirebaseDatabaseTransaction, _super);
    function FirebaseDatabaseTransaction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDatabaseTransaction.prototype.render = function () {
        var _a = this.props, children = _a.children, path = _a.path;
        return (createElement(FirebaseDatabaseContextConsumer, null, function (context) { return (createElement(FirebaseDatabaseTransactionWithContext, __assign({ path: path }, context, { children: children }))); }));
    };
    return FirebaseDatabaseTransaction;
}(Component));

export { FirebaseDatabaseContextConsumerLifeCycle, FirebaseDatabaseNode, FirebaseDatabaseProvider, FirebaseDatabaseMutation, FirebaseDatabaseTransaction };
